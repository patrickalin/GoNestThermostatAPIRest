// Code generated by go-bindata.
// sources:
// tmpl/endScript.html
// tmpl/header.html
// tmpl/history/body.html
// tmpl/history/menu.html
// tmpl/history/script.html
// tmpl/index.html
// tmpl/log/body.html
// tmpl/log/menu.html
// tmpl/log/script.html
// tmpl/nest/body.html
// tmpl/nest/menu.html
// tmpl/nest/script.html
// tmpl/nest.txt
// lang/en-us.all.json
// lang/fr.all.json
// test/configForTest.yaml
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplEndscriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x4a\x06\x31\x0c\xc7\xf7\x3e\x45\xec\xde\x16\x75\xfd\x7a\x83\xa3\x93\xe0\x13\x84\x36\xa7\x3d\xee\xda\xb3\xc9\x09\x52\xfa\xee\x42\xbb\xea\xf4\x05\x02\x49\xf8\x91\xff\x0f\x5a\x8b\xb4\xa6\x4c\xa0\x29\xc7\xf7\x50\xd3\x29\xba\x77\x75\x7b\x30\x06\x5e\x4a\x11\x96\x8a\x27\x84\x52\x09\x5e\xf1\x1b\x27\xa1\xe0\x8f\xf2\xde\xff\x77\xbf\xa3\xc1\x98\x65\xda\xbc\xed\x18\x28\x02\x0a\xc8\x27\x01\xe5\x08\x65\x1d\x63\x2c\xe1\x3a\x28\x0b\x70\x19\xfb\x89\x1f\xc4\xb0\x17\x8c\xb0\x22\x0b\xd5\xf9\x83\x87\x3a\x70\x0d\x5e\x3b\x16\x94\x14\xdc\xc6\x6e\xfb\xba\xa8\xfe\x98\x67\xfb\x64\x1f\xed\x91\xb2\xdd\x58\x2f\xea\xe6\x26\xbe\xa8\xd6\x46\x56\xef\xbf\x01\x00\x00\xff\xff\x78\xdd\xc8\x41\x2b\x01\x00\x00")

func tmplEndscriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplEndscriptHtml,
		"tmpl/endScript.html",
	)
}

func tmplEndscriptHtml() (*asset, error) {
	bytes, err := tmplEndscriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/endScript.html", size: 299, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdf\x6f\xdb\x46\x0c\xc7\xdf\xf3\x57\xb0\x7a\x19\x10\xec\xa4\xa6\x69\xb0\xce\xb5\x8c\x15\x45\xd0\x65\xe8\xf2\xd0\x74\xd8\x80\xa2\x0f\xb4\x8e\xb2\x98\xdc\x0f\xf5\x48\xdb\x31\x0c\xff\xef\xc3\x49\x4e\xea\x2c\xc8\x10\x0c\xd3\x83\x60\xca\xfc\x7e\x8e\xe4\x17\xc7\xed\xd6\x52\xcb\x81\xa0\xe8\x08\x2d\xa5\x62\xb7\x3b\x9a\x7a\x52\x84\xa6\xc3\x24\xa4\x75\xb1\xd4\xd6\xbc\x29\x66\xfb\xcf\x9d\x6a\x6f\xe8\xdb\x92\x57\x75\xf1\x97\xf9\xe3\x9d\x79\x1f\x7d\x8f\xca\x73\x47\x05\x34\x31\x28\x05\xad\x8b\x8b\xf3\x9a\xec\x82\xee\x55\x01\x3d\xd5\xc5\x8a\x69\xdd\xc7\xa4\x07\x89\x6b\xb6\xda\xd5\x96\x56\xdc\x90\x19\x82\x1f\x81\x03\x2b\xa3\x33\xd2\xa0\xa3\xfa\x24\x43\x5e\x18\x03\x9f\x3b\x02\x9c\xc7\x15\xc1\x29\x0c\x50\xc5\x85\xc0\xb1\x5f\x8a\x1e\x43\x13\x3d\x41\xcb\x49\x14\x38\x80\x76\x04\xb9\x9f\xb7\x80\x61\x03\x51\x3b\x4a\x43\x7c\x77\x2e\x64\xd1\xa8\x39\xc6\x56\x29\x1d\x67\x89\xd0\x88\x34\xe6\x61\xd9\x96\xa4\x49\xdc\x2b\xc7\x70\x50\xf9\x25\x65\x84\xe3\x8c\x5b\xc4\x7f\x74\x8a\x4b\xed\x62\x3a\xc8\xee\x51\x13\x37\x37\xe8\x38\xfc\xb2\xf0\xc8\xae\x6c\xa2\xcf\x22\x65\x75\x34\x3b\x84\x7d\x88\xd3\x6a\xfc\x7a\x34\x36\xfe\x11\x95\xc6\x72\x7b\x76\x64\x01\x83\x05\xcf\x81\x5b\x26\x0b\xef\xaf\xae\xc6\x82\x1d\x87\x1b\x48\xe4\xea\x42\x74\xe3\x48\x3a\x22\x2d\xa0\x4b\xd4\xd6\x45\x25\x8a\xca\x4d\xd5\x88\x54\xf3\x18\x55\x34\x61\x5f\x7a\x0e\x65\x23\x52\x40\x93\xa2\x48\x4c\xbc\xe0\x50\x17\x18\x62\xd8\xf8\xb8\x94\xe2\x09\x28\xfc\x2b\xd5\x68\x47\x9e\xfe\x57\xf6\x9a\x30\x3b\x68\xb8\x89\x41\xee\xc9\xff\x99\x60\xd6\x1c\xec\x01\xe6\x68\x3a\xda\x0b\x92\x9a\xef\xb2\x6b\xa9\xae\xbf\x2d\x29\x6d\xcc\x69\xf9\xaa\x3c\x19\xf2\xaf\x9f\xec\x07\x8a\xd9\xb4\x1a\x31\xcf\x72\xed\x37\x5c\xe1\xd5\x78\xea\x60\xde\x13\x15\x3c\xf4\xea\x5a\xe0\x99\xe7\x0f\xe3\x98\x1d\x01\x00\xcc\xa3\xdd\xc0\x76\xf8\x99\x9f\x1e\xad\xe5\xb0\x30\x1a\xfb\x09\x9c\xbd\xec\x6f\xdf\x0e\x7f\xed\x86\xf7\xf0\x2a\x45\x31\x29\x25\xa3\xe4\x7b\x87\x4a\x8f\xd5\x13\x78\xfd\xb2\xbf\x85\x93\xb3\x3b\x79\x7e\x94\x6e\xd5\xa0\xe3\x45\x98\x40\x43\x41\x29\x3d\x42\x73\x9b\xd0\x1f\xf2\xe6\x31\x59\x4a\x13\x08\x31\xd0\x5d\xf6\xb4\xda\x57\xbf\x9f\xe3\xaf\x9f\x7f\xff\x78\x06\xd2\xb1\x1f\x46\xf8\x89\xa4\x8f\xc1\xe6\x61\xb4\x31\xc1\xc5\xf9\x1b\x90\x65\x9f\xb7\x0a\xc4\x76\x9f\x4c\x8e\x3c\x05\x95\x71\xe6\x64\x19\x21\x5b\xc9\xb4\xbf\xdb\x19\xfb\xe7\xbb\x4f\x97\x17\x97\x1f\x26\x87\x40\x1b\x49\xc2\x0f\x0a\xeb\x98\x6e\x80\x5b\xd8\xc4\x25\xe4\x9d\x35\xec\x93\x1e\x17\x04\x2b\x46\x68\xd9\xd1\xa4\xaa\xee\x51\x5f\xb8\x05\xa7\x70\x71\x0e\x3f\x7f\x9d\xed\x5b\x7b\x60\x68\x5e\x99\x32\xa9\xaa\x28\x52\x7a\xbc\x6d\x6c\xc8\x97\xbf\xea\xd4\xbb\x33\xe9\x78\x55\x9d\x96\x3f\x95\xa7\xdf\xe3\x7b\xb3\x0f\x3c\x7d\x3e\x36\x8d\xfd\x54\x27\xe5\xeb\xf2\xd5\x5d\xf4\x14\x72\xfa\xe2\x0b\x05\xcb\xed\xd7\xdc\xcc\x76\x0b\x14\x2c\xec\x76\x7f\x07\x00\x00\xff\xff\x7b\xed\x7f\x6c\x15\x06\x00\x00")

func tmplHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHeaderHtml,
		"tmpl/header.html",
	)
}

func tmplHeaderHtml() (*asset, error) {
	bytes, err := tmplHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/header.html", size: 1557, mode: os.FileMode(420), modTime: time.Unix(1499533139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x6e\xc3\x20\x0c\x86\xef\x3c\x85\xe7\x9d\x33\xb4\xeb\x44\x73\xd9\x93\x10\xec\x2a\x96\x08\xa9\xc0\xe9\x16\x21\xde\x7d\x5a\xb3\x66\xc9\x09\x6c\xff\xfa\x3e\x70\xad\xc4\x57\x49\x0c\x38\xcc\xb4\x62\x6b\xb5\x82\xf2\x74\x8b\x5e\x19\x70\xe2\xb4\x60\x6b\xc6\x91\xdc\x21\x44\x5f\xca\x05\xc3\x9c\xd4\x4b\xe2\x8c\xbd\x31\x00\x00\x8f\xa1\xd0\x05\x33\x5f\x33\x97\x51\x65\x62\xec\x9d\x25\xb9\x3f\x13\xea\x87\xc8\xfd\xe3\xbe\xd5\xf9\xbf\xd8\x1a\x74\x6e\x9c\xb8\xe3\x32\x09\x89\xae\x9f\xa3\xcf\x8a\x50\x74\x8d\x7c\xc1\x61\xce\xc4\xf9\x03\xde\x6f\xdf\x50\xe6\x28\x04\xaf\x21\x84\x5d\x7c\x22\xd9\x23\xdf\xd9\xa7\xde\xd9\xc3\xc3\x76\xdd\xef\xf7\x39\x7b\x5d\x32\x6f\xc6\x23\x72\x4f\x7d\x49\xa2\xf3\xd8\xfc\x9d\xee\xa5\xeb\xc0\xbe\xed\x7b\x82\xae\xeb\x4d\xad\xc0\x89\xa0\xb5\x9f\x00\x00\x00\xff\xff\x34\x24\x24\x35\x71\x01\x00\x00")

func tmplHistoryBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryBodyHtml,
		"tmpl/history/body.html",
	)
}

func tmplHistoryBodyHtml() (*asset, error) {
	bytes, err := tmplHistoryBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/body.html", size: 369, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\x3d\xaf\x9c\x40\x0c\xec\xef\x57\xac\xfc\x6a\xde\xf6\x11\x50\x45\x4a\x8a\x28\xd5\xeb\x23\xc3\xfa\xc0\x7a\x7b\x5e\xb4\x6b\xd0\x9d\x10\xff\x3d\xe2\xeb\x72\x21\xa7\x7c\x34\xa9\xc0\xde\x19\xcf\xc8\xe3\x71\x74\x74\x66\x21\x03\x17\x92\x1e\xa6\xe9\x94\x0b\x0e\xa6\xf6\x98\x52\x01\x82\x43\x85\xd1\xac\x9f\x8c\x65\xa0\x98\x68\x2f\xcf\x7c\x25\x97\x69\xe8\xa0\x3c\x19\x63\x4c\xee\xf8\x4e\xac\x83\x28\xb2\x50\xdc\xde\x8e\xef\xdb\x88\x96\xd0\xfd\x84\x59\x70\x55\xaf\x1a\xc4\xe8\xad\xa3\x02\xd6\x02\x0e\x44\x0d\x4d\xe3\xc9\xd4\xc1\x7b\xec\x12\x39\x30\x0e\x15\xb7\xf6\x2c\xbf\xf6\xf7\x36\xc6\x86\xb4\x80\x97\x95\x0d\x06\x23\x63\x46\xd7\x0e\xc5\x91\x2b\xe0\x8c\x7e\xc6\x2e\xdd\xd9\x79\x0c\xfe\x2e\x75\x34\x97\x3a\x94\xdd\x4c\x8a\x59\x10\x7f\x83\xf2\x6d\xb5\x23\x38\x70\x83\xca\x41\x72\x3b\xe3\x7e\x43\xe5\x3a\x48\xb6\x8c\xff\x5f\xd0\xdc\xae\xab\x3c\xd0\xf1\xb0\xd9\x2a\xa2\x38\x30\x6d\xa4\x73\x01\x2f\x50\x7e\xa5\xa4\xb9\xc5\x87\x18\xad\xe3\xe1\x90\x2a\xbb\xfb\xba\x7e\x5c\xc0\x1a\xc1\x7e\x2d\xf7\x48\x0e\xfa\xbd\x7f\x30\xb0\x83\x05\x87\x03\x6e\xc1\x7a\x2e\x73\xdc\xac\x59\x28\xc7\xf1\xcd\xc0\xe7\x70\x21\x98\xa6\xd9\x62\x6e\x3d\x3f\x65\xed\x0a\x58\x2b\x0f\x47\x07\x0f\x9b\xd8\x26\xb7\x9c\x34\xc4\xdb\x2e\xb0\x55\x7f\xd0\x78\x70\xe6\x43\x03\xe5\x97\xd0\xfc\x25\xbe\x55\xed\xd2\x07\x6b\x1b\xd6\xb6\xaf\x5e\xeb\x70\xb1\x1d\x6a\xe4\xfa\x1d\x3d\x8b\x15\x4a\x9a\xd5\x9e\x49\x34\x6b\x02\x98\xfd\x98\xbf\x55\x1e\xe5\x1d\xca\x4f\x0b\xed\x1f\xb5\x1c\x0d\xe4\x43\x47\x31\xbd\xce\xf3\x17\xd1\x5f\x47\xcf\xd9\x9b\x8f\x2b\x74\xc6\x3e\x17\xc9\x6d\xef\x9f\x9e\xc7\xf6\x9b\x5b\xc1\xa1\x3c\x8d\xa3\x21\x71\x66\x9a\xbe\x07\x00\x00\xff\xff\xa6\x20\xaf\x28\x73\x04\x00\x00")

func tmplHistoryMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryMenuHtml,
		"tmpl/history/menu.html",
	)
}

func tmplHistoryMenuHtml() (*asset, error) {
	bytes, err := tmplHistoryMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/menu.html", size: 1139, mode: os.FileMode(420), modTime: time.Unix(1499540572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x6e\xdb\x38\x16\xbe\xf7\x53\x1c\xa8\x17\x92\x51\x57\xb2\xd3\x76\x17\x70\x93\x60\xb3\x69\xda\x74\x11\x27\x41\x6c\x6c\x67\x26\x08\x06\xb4\x78\x62\xb1\x91\x48\x81\xa4\xec\xba\x86\xde\x69\x9e\x61\x9e\x6c\x40\x4a\xb6\x65\x5b\x91\x93\x62\x2e\x8a\x41\x79\x11\x5b\xe2\x77\x7e\xf8\x9d\x3f\x3a\x8b\x05\xc5\x7b\xc6\x11\x1c\x15\x4a\x96\x6a\x27\xcf\x5b\x87\xc5\x57\xd0\xf3\x14\x8f\x1c\x8d\x5f\x75\xf0\x85\x4c\x49\x09\x00\x25\xc3\x23\x27\xd2\x3a\x55\xfd\x20\x98\xcd\x66\xfe\x44\x69\xa2\x59\xe8\x87\x22\x09\xc2\x88\x48\xad\x82\x58\x10\x8a\xd2\xff\xa2\x9c\xe3\xc3\xa0\x10\x3c\x6e\xed\x51\x7c\xdc\x02\x00\x98\x12\x09\x51\x96\x30\xca\xf4\x7c\xf5\x82\x48\x49\xe6\x23\x4c\x52\x38\x82\x5b\xfb\xd6\xac\x5b\x8e\x33\x78\x4f\x34\x7a\xbd\x37\xbd\x7f\x75\x7b\xaf\x0f\xba\x66\xb5\x3b\x70\x70\x70\xd7\xb1\xb0\xbb\x96\xfd\x98\x31\x4e\xc5\xcc\x27\x94\x9e\x4d\x91\xeb\x0b\xa6\x34\x72\x94\x9e\x63\xfc\x74\x3a\x70\x9f\xf1\x50\x33\xc1\x3d\x9c\xea\x36\x2c\x56\x16\x8c\x6d\x91\xe9\x34\xd3\x70\x04\x54\x84\x59\x82\x5c\xfb\x13\xd4\x67\x31\x9a\xaf\xff\x9d\x7f\xa2\x9e\x53\x20\x9c\xf6\xbb\x0d\xb9\x99\xda\x7c\x4e\x25\xe3\x46\xcd\xca\x56\x82\x4a\x91\x09\x56\xed\x2d\xb1\xb4\x6a\x2e\x94\x48\x34\x96\x16\x3d\x87\xb2\x69\xd5\x94\x59\xd4\x67\x9c\xa3\x3c\x1f\x0d\x2e\xe0\x08\x4a\xbd\x9b\x90\xc2\x47\x9f\xa4\x29\x72\x7a\x1a\xb1\x98\x7a\xb4\xa2\x25\x5f\x7f\x55\x22\x7c\x40\xe3\xa8\x61\xf7\x33\x8e\x87\xf6\xd9\x73\x16\x0b\xff\x33\x8e\xed\xae\xcc\x64\x9c\xe7\x55\x2f\x82\xe0\xea\x12\xae\xae\xcf\x2e\xb7\xd4\xf8\x82\x8b\x14\x79\xf5\xd8\x5b\x14\xaf\x35\x14\x0c\x79\x8e\x51\xb3\x7d\xc2\x02\x51\x00\x4a\xcd\xa9\x14\x5a\x84\x22\x6e\xef\x03\x4a\x24\x74\x3e\xd4\x44\xe3\x5e\x68\x26\x6b\xd4\x95\x7b\x0a\xb9\x89\x75\x8a\xdc\xd9\xc4\xe4\xad\xad\x73\x5c\x5d\xc2\xd9\xcd\xcd\xd5\xcd\x2e\x17\x28\xa5\x90\x1b\x64\x98\x17\xdb\x74\x84\x82\x2b\x11\xa3\x6f\x37\x4b\xc8\x26\x1d\x85\xd3\xdb\x3b\x3b\x41\xf4\x05\x0f\x63\xa1\x70\x0f\xfd\x25\xef\x87\xe3\xe3\x53\xc1\x39\x5a\x1c\x58\x41\xea\x1f\x06\xe3\x63\xa7\xde\x46\x71\xd2\xc1\xd9\x70\x78\xf2\xf1\x6c\xd7\x72\x99\x86\x4f\x08\xbd\xc9\xf8\x30\x93\x12\xb9\xa6\x44\x63\x99\x7a\xb6\xb0\x6b\xd2\xc0\xd6\x07\xd1\xa8\x59\x62\xa0\xee\x62\x31\x02\xe7\x82\x28\x0d\xc3\x39\x0f\x9d\x3c\xef\x83\x0b\x2f\xab\x0a\x4d\xc1\x16\xda\xe0\x25\x38\x81\x03\x2f\x77\x94\x9a\xe5\x6d\x89\x0c\x04\xd7\x91\x95\xe9\x35\x0b\x6e\xc9\x7d\xc8\xe2\xf8\x57\x24\xb2\x30\x07\xff\x81\x27\xca\x9d\x8b\x4c\xaa\x42\xa8\xff\x44\x91\x01\xe3\x99\xc6\x67\x0a\x0d\x31\x14\x9c\xaa\x3a\x6e\x1f\x6d\x71\x12\xef\x25\xaa\xc8\x70\xee\xb4\x37\xba\xcd\x32\x14\xef\x5a\x35\xc5\x35\x12\xa0\x22\x31\x03\x1d\xa1\x01\x12\xd8\x05\x29\x6d\x0a\x02\xa7\xda\x37\x00\x5f\xa5\x31\xd3\x9e\x33\x3c\xbb\x3e\xb9\x39\x19\x5d\xdd\x98\xdc\xdb\x91\x59\xce\x07\x38\x82\xff\x0d\xaf\x2e\xfd\x94\x48\x85\x9e\xd2\xf2\xb6\x7b\xd7\xf6\xdf\x1b\x3d\xe7\x25\xa4\x46\x9a\x4a\x32\x5b\x6e\x5f\xa3\x0c\x91\x6b\x32\xb1\xa9\xb6\x03\xad\xce\x1d\x9c\x92\xd8\xda\xe8\xdd\xb5\xeb\x95\x1a\x20\x4a\xa2\x33\xd9\xa0\xed\x33\xe3\xb4\xaa\xed\xe0\x31\x6d\x06\xb8\x1d\xa3\x1c\x82\x00\x39\x05\xc1\x97\x5d\xbe\x90\xcd\x8d\xb9\x56\xc1\xf9\xe9\xf9\xc9\xcd\x68\x58\x3c\x4d\x84\x98\xc4\xe8\x17\x43\xd9\x37\xc3\xce\x73\xcb\x6c\x70\x3b\x95\x4a\x4c\x49\xf8\x40\x26\xa8\xfa\x70\xeb\x86\x42\xa2\x15\x70\x3b\xe0\xc6\x8c\xa3\x7b\xb7\xb2\xb1\xab\x53\xa1\xbe\xe2\x17\x82\xd0\x53\x12\xc7\x63\x12\x3e\x78\x5b\x4c\x3c\x43\x6a\x37\x28\xab\x63\x2d\x5b\xc8\xa3\xc1\x83\x45\xab\xda\x98\xde\x17\x97\x1a\x93\x77\xd6\x24\x68\x01\x63\xb4\xd2\xdc\xdf\x18\xcb\x36\x2d\x8b\x8e\x53\xfa\x38\x65\x2a\x23\x31\xfb\x46\x8c\x41\x9b\x4d\x23\x32\x8e\x37\x7a\x91\x4d\x55\x42\xe9\xa9\x88\xb3\x84\x7b\xae\xd2\x92\xf1\x89\x21\xac\xac\x1a\xb7\x01\xcc\xb3\x64\x8c\xd2\x80\xd7\x07\xa8\xc3\xdf\x88\x99\xf2\x6e\x37\xe2\x7f\xeb\x2e\xcf\xee\x76\x56\x55\x50\x5e\x75\xd6\x98\xdf\xdd\x0e\xf4\xba\x5d\x78\x55\x07\xb9\xab\x66\x66\x10\xc0\x27\xae\x34\xe1\x9a\x99\xc6\x4b\x38\xb5\x14\xad\x79\xdb\xe4\xca\xbe\xb2\x1e\xcc\x9b\x28\xbb\x66\x78\x6a\x90\xde\x63\xed\xc4\x5d\xfa\x65\x61\x6e\xbb\x72\xf8\x8a\x09\xdf\xb8\xe2\x19\x36\x3a\xc0\xb3\x38\x2e\x51\x79\x4d\x46\x6c\x54\x5e\x35\x15\xfe\xb6\x08\x9b\x36\x67\x42\xf6\xcb\xd3\x22\x5b\x71\xc8\xad\x12\xbe\x11\xdb\x55\x77\xa9\x22\xec\x95\x33\x35\x8e\x29\x38\xda\x1a\x96\xd1\xc9\x57\xa6\xfa\x35\x13\x54\x33\x1d\x63\x1f\xdc\x11\x4b\xd0\xed\xec\x6c\xdf\x0b\x99\x10\xdd\x07\xf7\xbc\x9f\xd4\x6c\x27\x8c\xff\x9f\xc4\x19\xf6\xd7\x73\xf7\xa0\xdb\x7b\x63\x92\xa8\x03\xe6\xf3\xa0\xd7\x81\xd7\xdd\x76\x8d\x24\xf9\xda\x20\xf9\xb6\x03\x8f\x09\x4e\x24\xa3\xa6\xb7\xd4\x9e\xc6\xe6\x81\xc8\xb8\xee\xc3\xab\xde\xae\xac\x59\x19\x67\xfa\x51\x59\xb0\x44\xcf\x1b\xf7\xab\xb4\xdc\xba\x83\xc1\x00\x28\x2d\x1b\x5d\xdd\xca\xeb\xdd\x30\x2b\x32\x63\xfb\xe9\xa6\xce\xcf\xfb\x49\x62\x52\x24\x22\xcf\xb7\x97\xef\xbc\xad\x01\x26\x8c\x0b\xf9\x71\x1f\xc1\x7b\x19\x7c\xe6\xb9\xa2\xa8\x9f\x24\x7d\xa5\x80\x7c\xef\xe1\x4a\xdf\xcd\x85\xe6\x99\x74\x02\x81\xdf\x8c\x55\xc3\x6c\x83\xd9\xa7\x52\xda\x6a\x70\x76\xba\xb7\x04\x2b\x95\xdf\x50\x89\x2f\x3a\x2f\x5e\xfc\xf9\xc7\x69\x5d\x35\xae\x6a\xea\xe0\xdf\x4d\xb5\xfa\xea\x2d\x00\x34\xb9\x6a\x5a\xd6\x87\xa5\xbd\xc1\xc0\xa7\x14\x6c\x90\xb6\x6c\xa6\x82\x71\x3d\x64\xdf\xb0\x6f\xaa\xb6\x66\x2b\x22\xa9\x39\x98\x96\x8c\xf0\x49\x8c\x6e\xf5\xb7\xc0\xee\x78\x28\x6f\x4b\x8f\x76\xdb\x0b\xc6\xf7\x4d\x07\xbd\xa6\x70\x3d\x20\x36\x27\x84\xb1\x52\x9d\x0f\x65\xc7\x6c\x18\x11\xc5\x75\xea\x47\x98\x0d\xc6\x93\x3d\x43\xc1\x40\x7e\x0e\x85\x9d\xf5\x73\x28\xd4\xbe\xfe\x39\x14\xb6\xcc\xfe\x70\x43\xc1\x96\xfc\x9e\x69\xf0\x90\x04\x51\xe3\x38\xe8\x75\xbb\x4d\x65\xda\xfd\xa7\x8e\x83\x19\xe3\xf4\x7b\xe7\x80\xf9\xdb\x5a\xff\x07\x7a\xb1\x00\xf3\xf3\x39\xcf\xff\x0a\x00\x00\xff\xff\x22\xc7\xd2\x5b\xf7\x16\x00\x00")

func tmplHistoryScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryScriptHtml,
		"tmpl/history/script.html",
	)
}

func tmplHistoryScriptHtml() (*asset, error) {
	bytes, err := tmplHistoryScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/script.html", size: 5879, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xd1\x09\xc2\x50\x0c\x45\xff\x33\xc5\xe5\x0d\xa0\x0b\x3c\xba\x84\x13\x54\x73\xa5\x85\xf6\x59\xda\xfc\x48\xc8\xee\x12\x2b\x48\xa1\xbf\x27\x27\x87\xeb\x0e\xe5\x73\x6c\x44\x69\xdc\xac\x20\x42\xea\x60\xf3\xd4\x89\xd4\x81\xbd\x76\x02\x00\xee\x30\xce\xcb\xd4\x1b\x51\x12\x73\x2d\x97\x88\x23\xdf\x1e\xeb\xb8\x58\x72\xa9\xd7\xfd\x57\xea\xfd\xa5\xef\x93\x46\xe2\x9f\xb9\x1b\x87\x2b\x9b\xde\xfe\xb1\xac\x7d\x17\xb9\x83\x4d\x11\xf1\x09\x00\x00\xff\xff\xd0\x1f\xbc\x12\xb6\x00\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 182, mode: os.FileMode(420), modTime: time.Unix(1499533139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x4f\x33\x21\x10\xc6\xef\x7c\x8a\x09\xe9\xf1\x7d\xbb\x1e\x3c\x19\x76\x8f\x3d\xb5\x89\x31\x1e\x7b\xa1\xcb\x48\x89\x2c\x34\x30\x5d\xd3\x10\xbe\xbb\x59\xa8\xd6\xd8\xae\x7a\x21\xcc\x3c\x3f\xe6\xcf\x13\x52\x52\xf8\x62\x1c\x02\xdf\x79\x75\xe2\x39\xa7\x04\x84\xc3\xc1\x4a\x42\xe0\x03\xba\x23\xcf\x99\x09\x65\x46\xe8\xad\x8c\xb1\xe5\xbd\x77\x24\x8d\xc3\xc0\x3b\xc6\x00\x00\xc4\x2e\x74\xf5\x42\x72\x67\xf1\x83\xab\x41\x39\xff\x47\x0a\xe6\x80\x8a\x57\xae\xb2\xe1\x12\xd4\xc4\xbe\x83\xf5\x34\x89\x68\x68\x7f\x43\x7b\x36\xc3\xac\xb6\xc6\x11\xed\x9c\xb8\xf2\xae\x27\xe3\xdd\x9c\xbe\xc1\x18\xa5\x9e\xad\xfd\x28\x83\x1c\x90\x30\x7c\x03\x44\xf3\x75\x85\x94\x20\x48\xa7\x11\x16\xaf\x78\xfa\x07\x8b\x51\xda\x23\xc2\x43\x0b\x4b\xeb\xf5\x53\x51\x72\xfe\x79\x7b\x11\x29\x78\xa7\xbb\x94\x4a\x11\xc8\x59\x34\xe7\xd4\xed\xd1\x26\xb0\xf4\x59\x16\x6f\x26\xfe\x16\x26\xcc\xa0\x21\x86\xbe\xe5\xdb\x48\x92\x4c\xbf\xbd\x3c\xac\xc6\xe5\xbc\x3c\x38\xcd\xe1\xcd\x28\xda\xb7\xfc\xfe\x8e\xff\xda\x71\xd5\xd3\x6c\xc3\x0b\xb5\x89\xfa\x0f\x54\x71\xf8\x8a\xbb\xf2\x17\x9d\x9a\x3c\x64\x67\x71\xfa\x58\x1d\x63\xa2\x51\x66\xec\xd8\xa7\xfe\x1e\x00\x00\xff\xff\xec\x13\x5d\x11\xd1\x02\x00\x00")

func tmplLogBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogBodyHtml,
		"tmpl/log/body.html",
	)
}

func tmplLogBodyHtml() (*asset, error) {
	bytes, err := tmplLogBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/body.html", size: 721, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\x3d\x6f\xdb\x40\x0c\xdd\xfd\x2b\x0e\xcc\xac\xdc\x5e\xc8\x9a\x0a\xb4\x43\xd1\x29\x7b\x41\xe9\x68\x89\xc8\x99\x27\xdc\x51\x42\x0c\x41\xff\xbd\xd0\xa7\x1d\x35\x48\xd1\xa5\x93\x4d\xde\x7b\x7c\x4f\x7c\x1c\x06\x47\x17\x16\x32\x70\x25\xe9\x60\x1c\x4f\xb9\x60\x6f\x2a\x8f\x29\x9d\x41\xb0\x2f\x31\x9a\xe5\x27\x63\xe9\x29\x26\xda\xca\x0b\xbf\x91\xcb\x34\xb4\x50\x9c\x8c\x31\x26\x77\xbc\x13\xab\x20\x8a\x2c\x14\xd7\xb7\xe3\xfb\x3a\xa2\x21\x74\xef\x30\x33\xae\xec\x54\x83\x18\xbd\xb5\x74\x86\xa5\x80\x03\x51\x43\x5d\x7b\x32\x55\xf0\x1e\xdb\x44\x0e\x8c\x43\xc5\xb5\x3d\xc9\x2f\xfd\xad\x8d\xb1\x26\x3d\xc3\xd3\xc2\x06\x83\x91\x31\xa3\xb7\x16\xc5\x91\x3b\xc3\x05\xfd\x84\x9d\xbb\x93\xf3\x18\xfc\x2e\x75\x34\x97\x5a\x94\xcd\x4c\x8a\x59\x10\x7f\x83\xe2\x65\xb1\x23\xd8\x73\x8d\xca\x41\x72\x3b\xe1\x3e\xa1\x72\x15\x24\x9b\xc7\xff\x2f\x68\x6e\x97\x55\x1e\xe8\x78\xd8\x6c\x19\x51\x1c\x98\x26\xd2\xe5\x0c\x4f\x50\xfc\xa4\xa4\xb9\xc5\x87\x18\xad\xe3\xfe\x90\x2a\xbb\x7d\x5d\xf7\x0b\x58\x22\xd8\xae\x65\x8f\xe4\xa0\xdf\xf9\x07\x03\x1b\x58\xb0\x3f\xe0\x66\xac\xe7\x22\xc7\xd5\x9a\x85\x62\x18\x5e\x0c\x7c\x0f\x57\x82\x71\x9c\x2c\xe6\xd6\xf3\xc7\x2c\x73\xa7\x35\x9c\x34\xc4\xdb\xc6\x5e\xab\xbf\x0c\xd8\x2c\x62\xa5\xdc\x1f\x3f\xe1\x61\x95\xab\x86\x0f\x35\x14\x3f\x42\xfd\xb9\xa9\x1d\xdf\xa8\xb6\xe9\x8b\xb5\x35\x6b\xd3\x95\xcf\x55\xb8\xda\x16\x35\x72\xf5\x8a\x9e\xc5\x0a\x25\xcd\x2a\xcf\x24\x9a\xd5\x01\xcc\x76\xcd\xbf\x4a\x8f\xf2\x0a\xc5\xb7\x99\xf6\x8f\x5a\x8e\x7a\xf2\xa1\xa5\x98\x9e\xa7\xf9\xb3\xe8\x9f\xa3\xa7\xf0\xcd\xd7\x05\x3a\x61\xef\x22\xef\x43\xb4\x9d\xff\xf0\x40\xd6\xbf\xb9\x15\xec\x8b\xd3\x30\x18\x12\x67\xc6\xf1\x77\x00\x00\x00\xff\xff\x00\xe5\xad\x41\x75\x04\x00\x00")

func tmplLogMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogMenuHtml,
		"tmpl/log/menu.html",
	)
}

func tmplLogMenuHtml() (*asset, error) {
	bytes, err := tmplLogMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/menu.html", size: 1141, mode: os.FileMode(420), modTime: time.Unix(1499540566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x2a\x4e\x2e\xca\x2c\x28\x51\xaa\xad\x55\xa8\xae\x56\x48\xcd\x4b\x51\xa8\xad\x05\x04\x00\x00\xff\xff\x3e\x13\xcc\xb1\x1d\x00\x00\x00")

func tmplLogScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogScriptHtml,
		"tmpl/log/script.html",
	)
}

func tmplLogScriptHtml() (*asset, error) {
	bytes, err := tmplLogScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/script.html", size: 29, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplNestBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x99\xcd\x6e\xe3\x36\x10\xc7\xef\x79\x8a\x29\x81\xf6\xa6\x28\x89\xbd\xbd\x54\xf6\xa5\x41\xb7\x0b\x14\xdb\x62\x9b\x6e\xd1\x23\x2d\x8e\xa5\x41\xc4\x8f\x92\x23\xbb\xa9\xa1\x77\x2f\x24\x5b\x89\xa2\x38\x09\x1c\xcb\xf9\xea\x25\xb0\x39\xe4\x7f\x38\xbf\x19\x53\xe2\x64\xb5\x52\x38\x27\x83\x20\x66\x56\x5d\x89\xaa\x82\xd5\x0a\x18\xb5\x2b\x24\x23\x08\x8d\xa6\x14\x55\x75\x94\x28\x5a\x40\x5a\xc8\x10\x26\x22\xb5\x86\x25\x19\xf4\x62\x7a\x04\x00\xd0\xb5\x79\xbb\xdc\x8c\xf6\x2d\xa9\x2d\x22\xad\xa2\x51\xc7\xdc\x4c\x21\x9d\x41\xf0\xe9\x44\xc4\x81\x25\x53\x1a\x1b\x0c\x7c\xec\x4c\x26\x60\x49\x8a\xf3\xc9\xf7\x27\xdf\xf6\x96\xb8\x56\xb3\x40\xa9\xc4\x74\xb5\xba\x00\xf1\x19\x03\x43\x5a\x10\x1a\x06\x32\xf0\xd1\x8a\xaa\x4a\x62\xd7\x5b\x59\xef\x87\xd4\x44\x30\x69\x0c\x2c\xb5\x13\xd3\x24\x56\xb4\xb8\x6f\x4f\x02\x64\xc1\x93\xb5\x38\xe9\x4c\x34\x8b\x67\x85\xb5\x9a\x74\x76\x22\x20\x47\xca\x72\x9e\x88\xb3\x93\x93\x76\xbb\xcd\xe7\x0e\x82\xdb\xf2\xc9\x37\x51\x14\x1f\xd7\xdb\xd0\x6a\x04\x51\x34\x3d\x7a\x08\xd6\x07\xd1\xb1\x37\x73\x66\xbe\x3f\xd2\x86\x64\x4b\x76\x25\x8b\x69\xeb\xf1\xf6\x2c\x96\xb3\x02\x5b\xf5\xf5\x97\xe6\x6f\x14\xd8\x93\x43\xd5\xcb\xca\x7a\x8d\xbf\x3b\xb8\x36\xa8\x69\x12\x9c\x34\xad\x5e\x56\x5c\xb9\x9c\x52\x6b\xe0\xfa\x53\xa4\xa5\x8b\xb4\xf4\x97\x75\x95\x24\x71\x3d\x7b\x0a\x4d\xa2\x7e\x24\xbe\x6a\x72\xc3\xea\x7e\xf9\xad\x86\x5b\xe1\xa6\xb5\xcc\xb6\xe4\xdd\x80\x7f\x92\x83\xef\xcc\x2c\xb8\x1f\x76\x50\x4c\xe2\x6d\x9c\x1e\x84\xf7\x78\x74\xa6\x2e\xab\x57\x11\xde\xf0\x8a\x4f\x00\x96\x50\x5b\x6a\x4b\x82\x25\x45\xa1\x34\x01\x1b\x3e\xb4\xa9\xaa\x4f\x46\xe1\x3f\xf0\xc7\xd7\xfa\x00\xdb\xb7\xb4\xca\xc5\xab\x20\x3f\x04\x27\x2d\x8b\x22\x4a\xbd\x9c\x73\x24\xd5\x82\x82\xf5\x57\x5d\x6a\x7f\x92\x51\x70\x4e\x1e\x53\x26\x6b\x06\xf8\x55\x2e\xc9\x28\x45\xfe\x7f\xc5\xef\x63\x19\x78\x20\x74\x59\x2d\x75\x00\x76\x5d\x27\xb5\x0f\x1d\x1e\xf4\xb2\x6d\xc9\xa5\xce\x9f\xb0\xb3\x67\xc8\xc1\xef\x65\x68\xde\x46\x14\xd4\xd9\x18\x20\x11\xa1\x0c\x5c\x27\xe3\xa0\x89\x68\x9d\xec\x92\x89\x76\xcd\x8b\xa5\xc2\x4b\x32\xca\x5b\xd7\xc5\xff\x45\xd2\x10\x07\x47\x2d\xfd\x5e\x4e\x8d\xfb\x30\xc1\xb9\xa4\x62\x88\x77\x9f\xc6\x41\xa3\x75\xc8\x12\xbd\xf6\xa2\xf5\xeb\x2a\x37\xf8\x52\x5f\x4d\x7e\x91\x81\x21\xb7\xa5\x1f\x08\xa8\x97\x8c\x07\xe7\x59\x3b\x79\x29\x9c\x9c\xa3\xd7\x56\x23\xaf\x5f\xc9\x5b\xa2\x17\xa8\x1d\x7a\xc9\xa5\xc7\x01\x48\xd6\x37\xc7\xf9\x41\x31\xd6\x1e\xd2\x97\x21\x98\x97\x9a\xd4\xe6\xde\xd1\xe2\xfb\xb9\x1d\xab\x2a\x70\x92\x3d\x5d\xa6\xfb\x46\xd8\x75\xf3\x1e\xce\xc3\x99\xf4\x77\xcb\xee\x37\x8f\x21\x0c\x53\x73\x6e\x23\x45\x26\xcf\x0e\x5a\x7a\xad\xa3\xdc\xc9\x67\x2a\xc0\xc7\x6e\xd9\xf8\x77\x29\x0b\xfa\xb7\x7b\xc9\xfe\x6a\x0b\x96\x19\xee\x1b\xeb\x62\x2d\xf3\x66\x6b\xf0\x31\x72\x59\x61\x67\xd8\x6b\x4d\x7c\x2e\xf5\x0c\x3d\xfc\x3a\x87\x9f\x6c\x51\xd8\x25\xfa\x30\x40\x79\xce\xaf\xb5\xde\x29\xcb\x0e\xd5\xd4\x66\x3d\xa6\xe7\xb8\xa0\x14\xe1\xd3\x10\x6f\xe6\xaa\xd1\x7a\xa5\x18\x93\xb8\x69\xa8\x6d\x6b\xd8\x6d\x0d\xc6\xe3\xdc\x63\xc8\x99\xf4\x4d\x44\x9d\x66\xe0\x3e\x6d\xc3\x71\xbf\xc7\x3a\x68\xf7\xaf\x1f\xd1\x9d\xc8\xe6\xd6\x6b\xc9\x8c\xea\x82\x34\x7e\x78\x38\x5d\x0b\x52\x68\xd7\x07\x0e\xa9\x9b\x1e\xea\xe8\xac\xdb\x5c\x1d\x9f\x08\x48\xad\x61\x6f\x8b\x00\x85\xb5\x4d\x57\x37\x09\xb6\xf4\x29\xb6\x7d\xda\xeb\xc6\xec\x5a\x87\xaf\x1c\x36\x9a\x68\x63\xed\xc6\x62\xfa\x97\x2d\x3d\xcc\xbc\x5d\x06\xf4\xa0\x2c\x06\x30\x96\x21\x94\xce\x59\xcf\xc0\x39\xc2\x7a\x2b\x2c\xb3\xe3\xa3\x24\x6e\xbe\xec\xff\xeb\xd9\x8d\xd5\x78\x07\x56\xa7\x03\xb1\x3a\x7d\xa3\xac\x46\x3b\xb0\x3a\x1b\x88\xd5\xd9\x1b\x65\x75\xb6\x03\xab\xd1\x40\xac\x46\x6f\x94\xd5\xe9\x0e\xac\xc6\x03\xb1\x1a\x3f\x23\xab\x9b\xc7\xd4\x43\xcf\x1a\xb8\xfd\xb0\xe9\xcd\xda\xcc\xf0\x76\xd9\x58\x37\x96\xcd\xe8\xf5\x7f\x07\x1b\xdb\x6a\x05\x68\x14\x54\xd5\x7f\x01\x00\x00\xff\xff\xc8\x51\x5e\x63\x68\x1c\x00\x00")

func tmplNestBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplNestBodyHtml,
		"tmpl/nest/body.html",
	)
}

func tmplNestBodyHtml() (*asset, error) {
	bytes, err := tmplNestBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/nest/body.html", size: 7272, mode: os.FileMode(420), modTime: time.Unix(1499533139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplNestMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4d\x8f\x9c\x30\x0c\x86\xef\xf3\x2b\x22\xef\x99\xcd\xbd\x02\x4e\x95\xda\x43\xd5\xd3\xde\x2b\x43\x3c\x60\x6d\xc6\x41\x89\x41\x3b\x42\xfc\xf7\x8a\xaf\x99\x59\xba\xea\xc7\xa5\x27\x88\xf3\xbc\xaf\x1d\xdb\xe3\xe8\xe8\xcc\x42\x06\x2e\x24\x3d\x4c\xd3\x29\x17\x1c\x4c\xed\x31\xa5\x02\x04\x87\x0a\xa3\x59\x3f\x19\xcb\x40\x31\xd1\x7e\x3c\xf3\x1b\xb9\x4c\x43\x07\xe5\xc9\x18\x63\x72\xc7\x37\x61\x1d\x44\x91\x85\xe2\x76\x77\xbc\xdf\x2c\x5a\x42\xf7\x8e\x59\xb8\xaa\x57\x0d\x62\xf4\xda\x51\x01\xeb\x01\x0e\x42\x0d\x4d\xe3\xc9\xd4\xc1\x7b\xec\x12\x39\x30\x0e\x15\xb7\xf0\x9c\x7e\x8d\xef\x61\x8c\x0d\x69\x01\x4f\xab\x1a\x0c\x46\xc6\x8c\xde\x3a\x14\x47\xae\x80\x33\xfa\x99\x5d\xa2\x73\xe5\x31\xf8\x5b\xaa\x63\x71\xa9\x43\xd9\x8b\x49\x31\x0b\xe2\xaf\x50\xbe\xac\xe5\x08\x0e\xdc\xa0\x72\x90\xdc\xce\xdc\x6f\xa4\x5c\x07\xc9\x16\xfb\xff\x85\xe6\x76\x6d\xe5\x41\x8e\x87\xce\x56\x11\xc5\x81\x69\x23\x9d\x0b\x78\x82\xf2\x3b\x25\xcd\x2d\x3e\x8c\xd1\x3a\x1e\x0e\x53\x65\x77\x6b\xd7\x7d\x03\xd6\x11\xec\xdb\x72\x1b\xc9\x21\x7f\xef\x1f\x0a\xd8\x61\xc1\xe1\xc0\x2d\xac\xe7\x9d\xc5\x5a\x79\x38\x7a\x3d\xbc\x69\x2d\xdf\x42\x39\x8e\x2f\x06\xbe\x86\x0b\xc1\x34\xcd\xcf\xc8\xad\xe7\x0f\x9d\xcb\x07\x59\xcb\x49\x43\xbc\xee\xea\xed\xf4\x27\x83\xbb\xde\x87\x06\xca\x6f\xa1\xf9\x4b\xbe\x55\xed\xd2\x27\x6b\x1b\xd6\xb6\xaf\x9e\xeb\x70\xb1\x1d\x6a\xe4\xfa\x15\x3d\x8b\x15\x4a\x9a\xd5\x9e\x49\x34\x6b\x02\x98\x7d\x9b\x7f\x54\x1e\xe5\x15\xca\x2f\x8b\xec\x1f\x73\x39\x1a\xc8\x87\x8e\x62\x7a\x9e\xfd\x97\xa4\xbf\x5a\xcf\xc3\x37\x9f\x57\x74\x66\xef\x49\xde\x0f\xd1\xf6\xfe\xc3\x05\xd9\x7e\x73\x2b\x38\x94\xa7\x71\x34\x24\xce\x4c\xd3\xcf\x00\x00\x00\xff\xff\x95\xae\x10\x23\x75\x04\x00\x00")

func tmplNestMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplNestMenuHtml,
		"tmpl/nest/menu.html",
	)
}

func tmplNestMenuHtml() (*asset, error) {
	bytes, err := tmplNestMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/nest/menu.html", size: 1141, mode: os.FileMode(420), modTime: time.Unix(1499540719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplNestScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5b\x73\xe2\x38\x16\x7e\xcf\xaf\x50\xf9\x05\xd2\x19\xee\x49\xcd\x6e\x87\xa4\x76\x36\xa1\x27\xdd\xd5\x21\x5d\x21\xdb\xa9\xa9\xe9\x7d\x10\xd6\x01\x6b\x63\x4b\x2e\x49\x86\xa6\x28\xfe\xfb\x96\x6c\x13\x7c\xb7\x21\xa6\x2b\x79\x42\xd1\xb9\x7c\xdf\xd1\x77\x24\x61\xb3\x5e\x13\x98\x51\x06\xc8\x90\xa6\xa0\xae\x32\x36\x9b\x93\x61\xf0\xf1\xfa\x04\x21\x84\x96\x94\x11\xbe\x6c\x63\x42\x46\x0b\x60\xea\x2b\x95\x0a\x18\x88\xa6\x61\x73\x4c\x8c\xdf\xd0\xcc\x63\xa6\xa2\x9c\x35\x61\xa1\x4e\xd1\xda\xf7\xd1\x7f\x0b\x2c\x10\xf7\x94\xeb\x29\x74\x85\x08\x37\x3d\x07\x98\x6a\xcf\x41\x8d\x6c\xd0\x1f\xff\xbd\xfa\x4c\x9a\x46\x60\x61\x9c\x5e\xc6\xfc\x96\x32\x3e\x76\x05\x65\x3a\xcc\x6b\x2e\x07\xa4\xc4\x73\x88\xe6\xdb\xda\x92\x68\x3a\x53\x00\x56\x10\x66\x6c\x1a\x84\x2e\xa2\xa9\xf4\x1f\x69\x53\xc6\x40\xdc\x3d\xdd\x7f\x45\x57\x28\x8c\x1b\x37\x09\x30\xb6\xb1\xeb\x02\x23\x37\x16\xb5\x49\x93\x44\xa2\x6c\x76\x1f\x25\x37\x5f\x40\x03\x65\xb0\x44\xcf\x30\x9d\xf8\xe3\xa6\xb1\x5e\xb7\x9f\x61\xea\xcf\x0a\x4f\xd8\x9b\x4d\x14\x45\xa7\xf3\x30\x46\x0f\xdf\x46\xe3\x44\x98\x36\x67\xdc\x05\x16\xa5\x9d\x28\xf1\x2e\x42\x50\xa1\xa6\xa1\xc3\x24\x19\x06\x16\x81\x41\x18\xd9\x15\x5c\x71\x93\xdb\xa7\x65\x86\x02\x30\x59\x4d\x14\x56\x50\x6a\xea\x89\x8c\x70\xe1\x9c\x04\xa6\xd7\xda\x05\x66\xc4\x6d\x36\x27\x09\x1e\x0f\x63\x34\x7a\x7c\x7c\x78\x4c\xd7\x02\x84\xe0\x22\x56\x0c\xfd\x8f\x64\x39\x4c\xce\x24\xb7\xa1\xed\x4f\x86\x26\xf1\x72\x04\xa0\x93\x33\xa9\x45\x6c\x73\x66\xda\x5c\x42\x49\xf9\xc3\xba\x0f\xa7\xd7\x37\x9c\x31\xf0\xed\x90\xef\x48\xda\xc3\xce\xf4\xda\xc8\xce\x11\x30\xbd\x1f\x4d\x26\x7f\xfc\x39\x4a\x67\x0e\x65\x58\x92\x5b\xab\xdd\xf4\x84\x00\xa6\x08\x56\x10\xca\xee\x16\x2b\x68\x26\x38\xfb\x7d\x81\x15\x28\xea\x68\xb3\xc6\x7a\xfd\x84\x8c\xaf\x58\x2a\x34\x59\x31\xd3\xd8\x6c\x3e\xa2\x06\x3a\x8b\x06\xd3\x8d\x1a\x44\x42\x67\xc8\xe8\x18\xe8\x2c\xb5\xb6\xcd\x84\xf9\x3d\x67\xca\xf2\xed\x7b\xf9\x4e\x09\x9f\x4f\x9e\x6d\xff\x05\x58\x04\x69\xd0\xbf\x50\x05\x9f\x3b\xee\x09\x19\x38\x7c\xac\x60\x7e\x4f\x99\xa7\x60\x0f\x87\x09\x98\x9c\x11\x99\xac\x61\xee\x16\x26\x60\x26\x40\x5a\xba\xb6\xc6\x69\x6c\x37\xd9\x96\xfc\xf2\x24\x21\xf3\x27\x8e\xa4\xc5\x97\x48\x59\xa0\x8d\x30\x4a\xcc\x87\xaa\x0a\xf5\x91\x6c\xe8\x4e\x67\xab\x72\x9b\xcf\xb5\x30\xda\x3a\xc6\xe9\x49\x6a\xc9\xff\x27\xb9\xde\x3e\xbe\x4c\x1e\xc6\x6d\x17\x0b\x09\x3b\xe3\x64\x44\x34\xf5\xa8\x4d\x7c\xc4\x09\xb0\x1f\x74\x24\x1c\x15\x97\x0e\xdb\xbe\xc5\x0a\xb7\x9f\x26\xe8\x03\xea\x75\xbb\xdd\x0c\xbd\x39\x5a\x0e\x12\x5d\xa1\xbf\x03\xb9\x7d\xc1\xcc\xd8\x6c\x1a\xbf\x85\xea\xfb\x04\xd3\xe8\xf0\x1e\x8b\xe8\xf0\x0f\x57\xc4\x67\x57\xd1\xe1\x17\x8f\xc5\x87\x76\xcc\xd7\x9b\x47\x87\x13\x70\xa3\xc3\x07\x53\x45\x87\x63\xbe\x88\x0e\x6f\x41\x77\x43\xe3\xbf\x69\x3a\x2b\xc0\x7a\xf7\xc1\x71\xd5\xe6\xd0\xd6\x27\x89\x4f\xff\x6f\x1c\xe9\x8c\x8c\xa8\x61\xdf\xe2\x5d\xbb\xa5\x6d\x2c\xee\xbd\x66\x0e\xb5\x9f\x91\x96\xb2\xad\xcd\xab\xe0\xd3\x56\x12\xcc\xad\x55\x8e\xca\xb5\xd5\x8c\x0b\x07\x2b\x05\xe4\x89\x3a\xd0\x0d\x75\x8c\xce\x50\xc3\xdf\x24\x02\x82\xdb\x91\x5f\x96\xed\xc0\x47\x7a\x86\x1a\x1f\x7d\x3b\xca\x5e\x3f\x4b\x30\x4b\xd2\xf4\xb6\x69\x5a\xa8\x57\x90\xaa\x62\x4b\xc6\x43\x27\xba\x32\x3e\x59\x82\xab\xbf\xc3\xd5\xaf\x19\x57\xbf\x08\x57\xbf\x04\xd7\x60\x87\x6b\x50\x33\xae\x41\x11\xae\x41\x09\xae\xf3\x1d\xae\xf3\x9a\x71\x9d\x17\xe1\x3a\x2f\xc1\x75\xb1\xc3\x75\x51\x33\xae\x8b\x22\x5c\x17\x89\xbd\x3f\x37\xa4\x3e\x27\xa4\xc2\x8e\x5b\x14\xad\x5b\x35\x9a\x49\xd5\x2a\x11\xc8\xdf\xb5\x6f\xa8\x5a\x8d\xb1\x03\x15\x79\x12\x58\x50\x33\x79\xaa\x05\xdb\xbf\x3f\xf3\xf9\xb6\x72\xc1\x6c\x9b\x2f\x41\xc8\xac\x58\x63\xcf\x79\x98\x7d\xda\x5a\xf8\xeb\xe1\x6f\xc6\x3b\xa7\xcd\xa6\x91\x60\x4e\x67\x28\x72\x0e\x8d\xe9\xdc\xca\xbc\x19\xe7\x02\x62\xda\x23\x01\xa6\x31\xa4\xc8\xb4\xb1\x94\x57\x3f\x8c\x25\x45\x4b\xda\x72\x38\x67\xad\x25\x66\x94\xcd\x5b\xa6\x00\x69\x02\x53\xad\xc1\x0f\xe3\x7a\xd8\xa1\xd7\x01\x48\x3f\xb5\x06\x18\xbf\xd7\x22\xb0\x25\xd4\x0f\x88\xe0\x55\x4b\x7a\x8c\xad\x62\x18\x6e\x83\xe3\x31\x8e\xe0\x32\xbb\x5e\x13\xc5\x85\xd3\xfe\xcf\xf7\xcf\x8c\xc0\x4f\x34\xbc\x42\xfd\xbd\xea\xe6\x2d\xb2\x56\x30\x1e\xf4\x0c\x35\x3a\xbd\x5e\x00\xcd\xe6\x4b\x0d\xcd\xbf\xdd\xa5\xd8\x98\x36\xf7\xc8\x96\x8a\x91\x51\xc0\x8a\x14\xce\x8f\x4a\xc1\x01\x42\x3d\x27\x9f\x85\x5e\x93\x52\x26\xc7\x04\x68\xd1\xb9\x55\x0c\x2f\x2a\x19\x23\x29\x93\xa2\x22\x3f\x53\x46\x6e\xa9\x08\xbf\xd7\x5c\x5d\x21\x63\x6c\xec\x55\xec\x25\x65\x84\x50\x91\x14\x76\x78\xf7\x12\x4a\x03\x47\x69\xd0\xda\x0d\x29\xbe\xc4\x82\xc8\x56\xb7\x45\x60\x1e\xa2\xcf\x6a\xb3\x3d\x09\x8c\x8e\xc0\xc0\x1f\x8d\xa4\xde\x08\x4a\xc8\x9c\x5f\xd4\xca\xa6\x46\x32\x95\xe0\xff\xb3\xde\xc5\x98\xd4\x88\x7f\xc2\xbd\xd4\x62\x14\x93\xe9\x0d\xea\x5d\x8c\xc9\x11\xc8\x94\x30\xf8\x47\xcd\xeb\xf1\x7c\xac\xf5\x78\x86\x2a\xf2\xea\xf7\xeb\x5d\x91\x1a\xe9\x54\x24\xf0\x7b\xcd\xbb\x55\x8d\x0c\xe2\xbb\x55\x35\x3e\x83\x5e\xc1\x82\x14\x9f\x1d\x13\x4f\x2a\x4c\x19\x10\xcd\x6a\xe2\x02\x10\x7d\x56\xf7\xf6\xa2\x23\x3d\xa9\x34\x9e\xfc\x03\x31\x23\x8b\x3e\x06\x1d\xb7\x63\x19\xd9\x07\xa2\x8e\xd7\x9a\x02\xf6\x66\x5c\xa8\x56\x37\xf3\x58\x2c\xad\xf1\xdc\x93\xc9\xdb\x5a\x62\x1d\xff\xf4\xa4\x3a\x10\x4a\xfa\xf9\x6d\x11\x16\x0d\xc5\xc9\xbc\x58\xc7\xc1\x38\x32\x80\xd3\x91\xc7\x46\xf3\xe2\x58\xe5\x70\x5e\x1c\xcb\x87\xf1\xe2\x1c\xb1\x3c\x5b\xfd\x14\xd5\x27\xad\xa0\x5f\x50\xa9\x2d\xb0\xc2\x52\xa5\x91\xd5\x55\xb4\xf2\xad\x28\xbb\x7b\x07\xef\xac\x7b\x7b\x87\x89\xf4\x28\xed\x7b\x20\x96\x23\xb5\xef\x1b\xd0\x1c\xa7\x7d\x0f\x01\xf4\x4b\xda\xf7\x2d\xc0\x8e\xdd\xbe\x39\xd8\x0e\x6d\xdf\xdf\xdf\x59\xfb\xf6\xdf\xcf\xe1\xdb\x7f\x57\xdd\xfb\x06\x34\xc7\xe9\xde\x43\x00\xfd\x92\xee\x7d\x0b\xb0\x63\x77\x6f\x0e\x36\x7d\x6f\x2e\xea\xdd\x47\x4c\xfd\xcb\x7f\x77\xaf\x6e\x15\x98\xb2\x9c\x6b\x7f\xe6\x35\x3f\xf9\x5c\xe8\xad\x0f\x30\x73\xf3\xff\x05\x32\x13\x80\xe7\x4c\x05\xd8\x36\xfe\x99\xf7\xe5\xa2\xa4\x44\xb7\x98\xda\xab\xc3\xea\x44\xb4\x6b\x02\xac\xd1\x7a\xeb\x73\xbb\xbc\xc8\x99\xb8\xb5\x7c\x28\x4b\x3d\x8c\xab\xc2\xd9\x71\xde\xc0\xda\x71\x8e\xc7\x3b\x15\x3b\x07\xbd\xdf\xdf\x0e\x1a\x4e\xc5\xb5\xee\xa3\x02\x2b\xbb\xe3\xf4\xf7\xad\xd1\xa3\xff\x4e\xf5\x90\x02\x09\xac\x92\x2f\x3b\xea\xa9\x4e\x46\xe0\x2c\xd0\x87\x69\x42\xbb\x1e\x2a\x09\xe1\xfb\x1e\x8d\x73\x99\x20\x42\xe8\xc5\x7a\x88\x18\x65\xca\xa1\xe2\xfb\x35\x70\xdc\x59\xe6\x9b\x2c\xff\x87\x0c\xe0\xb8\x20\xb0\xf2\x04\x64\x6f\xec\x33\x6c\x09\x60\x16\x50\x95\xbd\xa7\x17\xe6\x35\xab\xe4\xbd\xc9\x79\x47\x02\xb6\xa4\x9e\xdc\x65\xad\x96\xd6\xf2\x1c\x4a\x72\x5e\x02\xfa\x99\xef\x42\x83\xec\xac\x5b\xf7\x7d\xd3\xba\x02\xa4\xf4\x04\x50\x66\xcd\x73\x53\x7f\x0b\x8d\x42\xbd\xdf\xcd\xab\xd6\x72\x1b\xdd\x72\x71\x69\x70\xcb\xc5\x7e\x7c\xeb\x1b\xae\x8c\x7e\xc1\x6d\x85\xe7\xd9\xef\x3b\x75\xec\xef\xc1\x7c\xa0\xd7\xef\x09\xd4\x1f\x3a\xbb\x2c\xc1\xcf\xda\x36\xa7\x97\x27\xc3\xce\xf6\xb7\x94\xeb\x35\x02\x46\xd0\x66\xf3\xff\x00\x00\x00\xff\xff\xc5\x2d\xc9\x1f\x72\x29\x00\x00")

func tmplNestScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplNestScriptHtml,
		"tmpl/nest/script.html",
	)
}

func tmplNestScriptHtml() (*asset, error) {
	bytes, err := tmplNestScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/nest/script.html", size: 10610, mode: os.FileMode(420), modTime: time.Unix(1499541431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplNestTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\xca\xc2\x30\x10\x46\xd7\xcd\x29\x86\xc2\xbf\xfc\x75\xef\x4e\x5a\xd0\x82\xb8\xb1\xb8\x8f\x76\xd4\x40\xd3\x4a\x3a\xb5\x94\x30\x77\xf2\x0c\x9e\xcc\xc5\x24\xa0\xd0\x3a\xdb\xf7\x5e\xf8\xa2\xfe\xa7\x4e\xed\xb1\x23\xf0\x7e\xb1\x41\xda\xe9\x8e\x32\x5d\xd7\xcc\x33\xae\xf7\x25\xa4\x39\x3e\xcc\x19\xa1\xa8\x52\x66\x58\x25\x09\x84\x93\x37\x84\x16\x39\xb3\xd8\x87\xf6\x42\x83\x76\x08\x47\x74\x9d\x69\x9b\x10\x89\x1c\x61\x60\xb1\x59\xdb\x93\xc1\x86\xa0\x44\x7b\x47\xa7\xa9\x77\x98\x7d\x75\x41\xf8\xe4\xcc\xaf\x67\x26\x79\xa9\xdd\x15\x7f\xd4\xc2\x67\xe2\x6d\x6f\x4d\x65\x68\x9c\xfc\x5c\x84\xcc\x7f\x61\xe9\xa0\x47\x58\xc2\xad\xb5\x28\x41\xf4\xe3\xd0\x41\x8f\xcc\x4a\xbd\x03\x00\x00\xff\xff\x1c\x75\x9d\x6c\x7c\x01\x00\x00")

func tmplNestTxtBytes() ([]byte, error) {
	return bindataRead(
		_tmplNestTxt,
		"tmpl/nest.txt",
	)
}

func tmplNestTxt() (*asset, error) {
	bytes, err := tmplNestTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/nest.txt", size: 380, mode: os.FileMode(420), modTime: time.Unix(1500564014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langEnUsAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x82\xf0\x1c\xe4\x00\x59\xb3\xb4\x5b\x87\x2e\x9d\x04\xa2\x62\x2d\x01\xfa\x09\x28\xba\x85\x60\xe8\xee\x85\x1c\xa7\x71\x2b\xa3\x31\xb2\x19\xf6\xf7\x3e\x92\x7e\xe3\x0e\xa0\x3b\x59\xc9\xdd\x11\xea\x33\x40\x17\xc5\x10\x77\xc7\xf9\xf5\x0e\xa0\xec\xa1\x52\x5a\x69\xcc\x69\xc1\x05\xaa\xd4\x38\x1e\x4e\x71\x08\x52\x0a\x68\xcc\xdd\xfe\x8f\xe4\xf7\xe7\x74\xf1\x55\x9d\xcf\xca\x90\xed\x8d\x28\x1b\x94\x27\x21\x6e\xdd\xcf\x80\x1e\x16\x86\x09\x03\x41\xe7\x0e\xcd\xa0\x55\x36\xcd\xf0\xcf\xd4\x33\x71\x8a\x41\xf5\x4c\x24\x36\xf4\x2b\x57\x3f\x91\x73\xb1\x8a\x5e\x26\xb4\x94\x26\x3c\x04\x26\xd4\x8a\x3c\x5a\xa7\xde\xeb\xb8\xb5\x9f\x72\x8d\x83\xc1\xb4\xdc\xeb\x92\x86\x29\xdd\x5e\xb1\x31\x98\xda\x93\xda\xad\x94\x58\x4f\x1f\x8c\x9e\x1e\xdd\x0f\x6c\x00\x31\x04\x67\x4c\x52\x99\xd7\xab\xb0\x94\xc7\x57\xff\x57\x7a\xbb\x8a\x63\xcf\xe8\xef\x37\xf5\x15\xd9\xe9\x5b\x2e\xc7\x81\xb7\x34\xf4\x16\x07\x30\xf8\x49\xdb\xab\xb9\x97\x98\x3b\xd9\x95\xef\x00\x00\x00\xff\xff\xa2\x16\x10\xd2\x54\x03\x00\x00")

func langEnUsAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langEnUsAllJson,
		"lang/en-us.all.json",
	)
}

func langEnUsAllJson() (*asset, error) {
	bytes, err := langEnUsAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/en-us.all.json", size: 852, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langFrAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xcd\x6e\xe2\x48\x10\xbe\xcf\x53\x94\xb8\xcc\x65\x94\xb9\xef\x2d\x1b\x36\x43\xa2\x0d\x44\x21\x9b\xd1\x9c\x50\x61\x17\xb8\x56\xfd\xe3\xed\x1f\x18\x0b\xf1\x3e\xcb\x73\xf0\x62\xab\x36\x64\x12\x37\x2e\x44\xb4\x47\xa8\xef\xfb\x5c\xd5\x55\xf5\xb9\xbd\xf9\x04\x00\x30\xb8\xae\xdd\xe0\x37\x38\xfc\x68\xff\xb0\xa1\xa2\xf4\xd7\xe0\x7a\xe5\x58\x0d\xda\xc0\xf6\xcb\x11\x1c\x97\x12\xd8\xc6\xd0\xc5\x8e\xc9\x07\x28\x14\x93\x09\xc0\x06\xbe\x59\x81\x79\x73\x80\xb4\x70\x6a\x71\x1d\x99\x1b\x0e\x8d\xc0\x7c\x61\xa5\xa8\x8b\x1e\xa2\x04\xbe\xb7\xd1\x65\x58\x2a\x04\xec\x70\xbf\x2b\x48\xcf\x5d\x2e\x4e\x2b\x2e\x08\xee\x4a\x89\xc6\xbe\xb6\x9e\x03\x2f\xe0\x6e\xd8\xa5\xfe\xe1\x83\x40\x4a\x91\x0e\xf4\x96\xe6\x02\xf4\x76\xbf\x5b\x39\xa6\xac\x8c\x91\xd5\x24\x35\xa5\x28\x22\xe5\x3d\x1c\xb1\x0f\xd6\x49\xc7\x74\x88\xf2\x3f\x31\xab\x7d\x14\x35\x97\x72\x2b\x8e\xe1\xfd\xae\xcb\xba\x33\x25\xfd\x84\xbf\x5e\x04\xd6\xaf\x70\x87\x74\x8f\x46\xea\x21\x9a\xd5\x49\xfd\xf7\x51\x49\xf0\x98\x06\x24\xe4\x70\x51\x3d\xb2\xe9\x62\xff\x44\x1f\x60\xda\x18\x71\x4e\xc8\x19\xde\xff\xeb\x08\x7c\x63\x8a\xca\x59\xc3\x1e\x03\xdb\x4c\xe6\x01\xa5\x15\x7b\x40\xe7\x73\xac\x74\xc4\x1a\x39\x5b\x30\x5e\x56\xd2\x54\x8d\x23\xe7\xeb\x28\xed\xdf\x38\x4f\x77\x6c\x5d\xa8\x44\xb0\x2b\x73\xf4\x4a\xc4\xae\x7a\x96\x68\x1c\xf5\x9c\x1c\x4c\x16\x70\x6b\x95\xb2\x6b\x72\x5e\xe4\x27\x36\x94\x04\x8b\x5f\xc8\x8e\xd4\xa4\x90\xca\x9f\x14\xc1\x9e\x3c\xf9\xd1\x91\xf7\xd1\x49\xcb\xd2\x86\xd9\x1a\xc0\xa0\xad\xaf\xab\xfd\xae\x67\x0d\x9e\x90\xa5\xf1\x79\x54\x91\x7b\xd0\x30\x44\x56\x52\x4f\x5b\x0e\x60\x51\x44\x1d\xd5\x7e\x07\xe5\x67\x8c\x7f\xdb\xe8\xca\xcf\x55\xe4\x1e\xad\x27\x0c\x52\xfa\xcf\x18\x7f\xa6\xb3\xaa\x85\x34\x12\x15\xda\x81\xae\x92\x13\x9e\xcb\xa7\xa0\x10\xd2\xb9\xbf\x0e\x77\x45\x31\x3f\xcb\x29\xd5\x82\xc4\x94\xea\xd0\xd3\xf6\xa9\x8d\xe2\x50\x4d\x63\x36\x53\xd3\xe8\x03\xb2\xa1\x12\xbe\xb3\x91\xdc\xf6\x85\x03\x79\x4f\x50\x46\x58\xa5\x17\x88\xb7\x31\x90\x89\x5d\xa5\x67\xd2\x35\x39\x0c\x72\xdb\x13\x62\xbf\x3b\x42\xba\x5c\xd6\xe4\x03\x6a\xa9\xd2\xb7\x78\x87\xf6\x7d\xc8\x8e\x8a\xd6\x05\xfa\x79\xa9\x26\x78\x03\x75\xc9\x24\xbe\x28\x26\x91\xf2\x57\x45\xa6\x24\xbd\x95\x8e\xf1\xd7\x93\xea\xd1\xf8\x16\xc5\xc7\x3e\xe1\x02\x55\xbb\x85\xa7\xdc\x1f\x24\xed\xee\x24\x1f\xdf\x72\x56\x62\x93\xa3\x4d\x6a\xca\x60\xb3\xb9\xba\xb1\xd1\x84\xed\x16\x4a\x6c\x06\x5f\x7a\xe4\xba\x90\xcc\x06\x2a\x5e\x4a\x93\x35\xc2\xfc\x56\xa2\xec\x5a\xc0\xfe\x8e\x99\xae\xa6\x92\xa3\x96\x9c\xdb\x36\x94\xf5\x4e\x37\xb3\x8a\x92\x27\xcf\xd8\xcc\x34\x85\x53\x67\x3b\xd4\x7b\x07\xa8\xe1\x5d\x45\x07\x28\x04\x54\xea\xaa\xb7\xfa\xb3\x84\x4e\x0a\x35\x39\x6f\xcd\x6c\xe9\x88\x02\x1b\xe9\xae\x36\x22\xa5\x6c\x12\x7c\x6c\xe1\xdb\x6d\xaf\x48\x34\x8e\xb0\x9c\x91\x46\x56\xb3\x22\x3d\x5a\xea\xde\xab\x0c\x54\xe8\xdf\xe7\x79\x50\x80\x56\xc1\xf7\x97\x76\x39\xfb\xb2\x14\x67\x81\x35\x2d\x1c\x9e\x5c\x89\x3e\x96\x6c\xba\xb0\x86\x8a\xa0\x4e\x7e\xb9\xd9\x5c\x3d\xbf\xaa\x6e\xb7\xff\xaf\x8e\xb3\xc2\xdd\x12\x9d\x5d\x3a\xd4\x97\xf5\x72\x6d\x9d\xca\x3c\xb4\xb1\xd1\x5d\xda\xc3\x1f\x36\x42\x85\x2b\xfa\x60\xf3\x2e\xa0\x65\xef\x80\x45\x58\xa3\x23\x78\x21\xe7\x65\xc3\x3a\x46\x93\x5d\xf9\x23\x23\xfb\x0a\xd1\xf3\xf6\x93\xe1\x9d\xb9\xdf\x9c\x71\xf7\x23\x04\x50\xcf\x19\x4d\xc8\x5d\x1e\xdd\x92\x3e\xac\x55\xf0\x3c\xff\xf4\xb8\x5e\x63\x03\x5f\xa1\x92\xaf\xe3\x8f\xe8\x02\xc3\x57\x78\x40\xf6\xb9\xf1\x9f\xa1\xe9\xf7\xf0\x4f\xdb\xff\x02\x00\x00\xff\xff\x5d\x0d\xf9\xdd\xb8\x0d\x00\x00")

func langFrAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langFrAllJson,
		"lang/fr.all.json",
	)
}

func langFrAllJson() (*asset, error) {
	bytes, err := langFrAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/fr.all.json", size: 3512, mode: os.FileMode(420), modTime: time.Unix(1500563972, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testConfigfortestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6a\xe3\x30\x10\xbd\xfb\x2b\x1e\xce\xa1\x5d\x48\x9a\x06\x4a\x29\x3e\x2c\x74\xe9\x1e\x16\xca\x12\xba\xe9\x07\x8c\xa5\x71\x2c\x22\x6b\x8c\x34\x4e\xeb\xbf\x5f\xe4\x34\x4d\x96\xe6\xb0\x3a\x69\xe6\xf1\xde\x8c\x9e\xde\x62\xb1\x28\x66\xf0\x14\xb6\x03\x6d\x19\xd7\x1c\x16\x43\x9a\xa3\x89\xdf\x0a\x9c\xda\x15\xa6\x7e\x31\xfb\x38\x58\x53\xa4\x2e\xa1\x91\x88\xc0\x49\x8b\x19\x7e\x4b\xec\xc8\xfb\x11\x56\xc2\x95\xc2\xb4\x14\xb6\x5c\x60\x82\x5f\x5f\x9e\x2b\x94\xad\x6a\x9f\xaa\xe5\x92\x7a\x77\x93\xbb\x37\x46\xba\x5c\x2c\xd3\x6e\xb4\xa4\xb4\x2c\x8b\x19\xb4\x65\xec\x78\x9c\xc3\xe9\x55\x42\x13\x39\x0f\x3f\x32\x2d\xa5\xb6\x16\x8a\xf6\xc4\xff\x98\xf0\x68\x0c\xa7\xb4\x91\x1d\x87\x0a\xe5\x28\x43\xd4\x7c\x2f\x4f\x1b\xbf\x70\x13\x39\xb5\x50\xd7\xf1\x1c\x35\x23\x88\x42\x05\x29\x6f\x8d\x9a\x0d\x0d\x89\x31\xca\x00\x8a\x8c\xda\x8b\xd9\xb1\x45\x3d\x42\x7a\x0e\x6f\x4c\xda\x72\x04\x05\x3b\x8d\xc3\xb5\x0b\x48\x6c\x24\xd8\xec\x53\x3c\x68\x6f\x5c\xc7\xb1\x42\x79\x7f\x7b\x36\xf7\x57\x03\x8d\x03\xc3\xba\xd4\x7b\x1a\xe1\x42\x93\x9d\x52\x27\x21\x41\x02\x8c\x84\x24\x3e\x3b\xf5\x71\x7b\x34\xea\xf6\xa4\x6c\x2b\x94\x99\x59\x16\xc0\xff\xcb\xbd\x71\xdd\xd3\x64\x7c\xbb\xd9\xac\x2f\x69\xe5\xfe\x5a\xa2\xa2\x42\x59\xad\x56\xab\x55\xf9\xe5\x5b\x5d\x68\xfc\xf0\xfe\xf4\x03\x81\xb3\xad\x14\x47\xb8\xc3\xdc\x02\x9f\xe0\x25\xed\x23\xf6\x87\xe3\x7e\xb2\xc2\x8b\x21\xdf\x4a\xd2\xaf\x68\xde\xa1\x42\xf9\x70\xfb\x70\x7f\x0e\xbe\x26\x8e\x81\x3a\xae\x50\x46\x91\x7f\x78\x6b\x4a\xe9\x4d\xa2\xbd\x00\x3d\x91\x52\x4d\x29\xb3\xf2\xff\x9c\x3d\xe9\xe7\x7b\xcf\x31\x07\x74\x35\x79\x05\x2c\xbe\xe3\x0e\x1a\xc9\xe4\xc7\x78\xd9\x3e\xf3\x9e\x7d\x85\xbb\x1c\x3e\x41\x0e\x41\xce\xa0\x11\xcb\x70\x01\xd2\x34\xde\x05\x46\x97\xeb\x7e\x50\x74\x62\x76\xd5\xd1\x8b\x43\xd1\x90\x4f\x5c\xcc\x0e\x5c\xee\x7a\x4f\xca\x73\x24\x25\x75\x06\x8d\xf3\x93\x50\x23\xde\x72\x9c\x52\xe7\x02\xea\x21\x58\xcf\xb6\x00\x2c\xef\x3f\x15\x8e\xa7\xf8\x1b\x00\x00\xff\xff\xe1\xe2\x3e\xaf\x96\x03\x00\x00")

func testConfigfortestYamlBytes() ([]byte, error) {
	return bindataRead(
		_testConfigfortestYaml,
		"test/configForTest.yaml",
	)
}

func testConfigfortestYaml() (*asset, error) {
	bytes, err := testConfigfortestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/configForTest.yaml", size: 918, mode: os.FileMode(420), modTime: time.Unix(1499533139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/endScript.html": tmplEndscriptHtml,
	"tmpl/header.html": tmplHeaderHtml,
	"tmpl/history/body.html": tmplHistoryBodyHtml,
	"tmpl/history/menu.html": tmplHistoryMenuHtml,
	"tmpl/history/script.html": tmplHistoryScriptHtml,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/log/body.html": tmplLogBodyHtml,
	"tmpl/log/menu.html": tmplLogMenuHtml,
	"tmpl/log/script.html": tmplLogScriptHtml,
	"tmpl/nest/body.html": tmplNestBodyHtml,
	"tmpl/nest/menu.html": tmplNestMenuHtml,
	"tmpl/nest/script.html": tmplNestScriptHtml,
	"tmpl/nest.txt": tmplNestTxt,
	"lang/en-us.all.json": langEnUsAllJson,
	"lang/fr.all.json": langFrAllJson,
	"test/configForTest.yaml": testConfigfortestYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lang": &bintree{nil, map[string]*bintree{
		"en-us.all.json": &bintree{langEnUsAllJson, map[string]*bintree{}},
		"fr.all.json": &bintree{langFrAllJson, map[string]*bintree{}},
	}},
	"test": &bintree{nil, map[string]*bintree{
		"configForTest.yaml": &bintree{testConfigfortestYaml, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"endScript.html": &bintree{tmplEndscriptHtml, map[string]*bintree{}},
		"header.html": &bintree{tmplHeaderHtml, map[string]*bintree{}},
		"history": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplHistoryBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplHistoryMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplHistoryScriptHtml, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"log": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplLogBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplLogMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplLogScriptHtml, map[string]*bintree{}},
		}},
		"nest": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplNestBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplNestMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplNestScriptHtml, map[string]*bintree{}},
		}},
		"nest.txt": &bintree{tmplNestTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


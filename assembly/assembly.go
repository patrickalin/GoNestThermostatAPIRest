// Code generated by go-bindata.
// sources:
// tmpl/endScript.html
// tmpl/header.html
// tmpl/history/body.html
// tmpl/history/menu.html
// tmpl/history/script.html
// tmpl/index.html
// tmpl/log/body.html
// tmpl/log/menu.html
// tmpl/log/script.html
// tmpl/nest/body.html
// tmpl/nest/menu.html
// tmpl/nest/script.html
// tmpl/nest.txt
// lang/en-us.all.json
// lang/fr.all.json
// test/configForTest.yaml
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplEndscriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x4a\x06\x31\x0c\xc7\xf7\x3e\x45\xec\xde\x16\x75\xfd\x7a\x83\xa3\x93\xe0\x13\x84\x36\xa7\x3d\xee\xda\xb3\xc9\x09\x52\xfa\xee\x42\xbb\xea\xf4\x05\x02\x49\xf8\x91\xff\x0f\x5a\x8b\xb4\xa6\x4c\xa0\x29\xc7\xf7\x50\xd3\x29\xba\x77\x75\x7b\x30\x06\x5e\x4a\x11\x96\x8a\x27\x84\x52\x09\x5e\xf1\x1b\x27\xa1\xe0\x8f\xf2\xde\xff\x77\xbf\xa3\xc1\x98\x65\xda\xbc\xed\x18\x28\x02\x0a\xc8\x27\x01\xe5\x08\x65\x1d\x63\x2c\xe1\x3a\x28\x0b\x70\x19\xfb\x89\x1f\xc4\xb0\x17\x8c\xb0\x22\x0b\xd5\xf9\x83\x87\x3a\x70\x0d\x5e\x3b\x16\x94\x14\xdc\xc6\x6e\xfb\xba\xa8\xfe\x98\x67\xfb\x64\x1f\xed\x91\xb2\xdd\x58\x2f\xea\xe6\x26\xbe\xa8\xd6\x46\x56\xef\xbf\x01\x00\x00\xff\xff\x78\xdd\xc8\x41\x2b\x01\x00\x00")

func tmplEndscriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplEndscriptHtml,
		"tmpl/endScript.html",
	)
}

func tmplEndscriptHtml() (*asset, error) {
	bytes, err := tmplEndscriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/endScript.html", size: 299, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdf\x6f\xdb\x46\x0c\xc7\xdf\xf3\x57\xb0\x7a\x19\x10\xec\xa4\xa6\x69\xb0\xce\xb5\x8c\x15\x45\xd0\x65\xe8\xf2\xd0\x74\xd8\x80\xa2\x0f\xb4\x8e\xb2\x98\xdc\x0f\xf5\x48\xdb\x31\x0c\xff\xef\xc3\x49\x4e\xea\x2c\xc8\x10\x0c\xd3\x83\x60\xca\xfc\x7e\x8e\xe4\x17\xc7\xed\xd6\x52\xcb\x81\xa0\xe8\x08\x2d\xa5\x62\xb7\x3b\x9a\x7a\x52\x84\xa6\xc3\x24\xa4\x75\xb1\xd4\xd6\xbc\x29\x66\xfb\xcf\x9d\x6a\x6f\xe8\xdb\x92\x57\x75\xf1\x97\xf9\xe3\x9d\x79\x1f\x7d\x8f\xca\x73\x47\x05\x34\x31\x28\x05\xad\x8b\x8b\xf3\x9a\xec\x82\xee\x55\x01\x3d\xd5\xc5\x8a\x69\xdd\xc7\xa4\x07\x89\x6b\xb6\xda\xd5\x96\x56\xdc\x90\x19\x82\x1f\x81\x03\x2b\xa3\x33\xd2\xa0\xa3\xfa\x24\x43\x5e\x18\x03\x9f\x3b\x02\x9c\xc7\x15\xc1\x29\x0c\x50\xc5\x85\xc0\xb1\x5f\x8a\x1e\x43\x13\x3d\x41\xcb\x49\x14\x38\x80\x76\x04\xb9\x9f\xb7\x80\x61\x03\x51\x3b\x4a\x43\x7c\x77\x2e\x64\xd1\xa8\x39\xc6\x56\x29\x1d\x67\x89\xd0\x88\x34\xe6\x61\xd9\x96\xa4\x49\xdc\x2b\xc7\x70\x50\xf9\x25\x65\x84\xe3\x8c\x5b\xc4\x7f\x74\x8a\x4b\xed\x62\x3a\xc8\xee\x51\x13\x37\x37\xe8\x38\xfc\xb2\xf0\xc8\xae\x6c\xa2\xcf\x22\x65\x75\x34\x3b\x84\x7d\x88\xd3\x6a\xfc\x7a\x34\x36\xfe\x11\x95\xc6\x72\x7b\x76\x64\x01\x83\x05\xcf\x81\x5b\x26\x0b\xef\xaf\xae\xc6\x82\x1d\x87\x1b\x48\xe4\xea\x42\x74\xe3\x48\x3a\x22\x2d\xa0\x4b\xd4\xd6\x45\x25\x8a\xca\x4d\xd5\x88\x54\xf3\x18\x55\x34\x61\x5f\x7a\x0e\x65\x23\x52\x40\x93\xa2\x48\x4c\xbc\xe0\x50\x17\x18\x62\xd8\xf8\xb8\x94\xe2\x09\x28\xfc\x2b\xd5\x68\x47\x9e\xfe\x57\xf6\x9a\x30\x3b\x68\xb8\x89\x41\xee\xc9\xff\x99\x60\xd6\x1c\xec\x01\xe6\x68\x3a\xda\x0b\x92\x9a\xef\xb2\x6b\xa9\xae\xbf\x2d\x29\x6d\xcc\x69\xf9\xaa\x3c\x19\xf2\xaf\x9f\xec\x07\x8a\xd9\xb4\x1a\x31\xcf\x72\xed\x37\x5c\xe1\xd5\x78\xea\x60\xde\x13\x15\x3c\xf4\xea\x5a\xe0\x99\xe7\x0f\xe3\x98\x1d\x01\x00\xcc\xa3\xdd\xc0\x76\xf8\x99\x9f\x1e\xad\xe5\xb0\x30\x1a\xfb\x09\x9c\xbd\xec\x6f\xdf\x0e\x7f\xed\x86\xf7\xf0\x2a\x45\x31\x29\x25\xa3\xe4\x7b\x87\x4a\x8f\xd5\x13\x78\xfd\xb2\xbf\x85\x93\xb3\x3b\x79\x7e\x94\x6e\xd5\xa0\xe3\x45\x98\x40\x43\x41\x29\x3d\x42\x73\x9b\xd0\x1f\xf2\xe6\x31\x59\x4a\x13\x08\x31\xd0\x5d\xf6\xb4\xda\x57\xbf\x9f\xe3\xaf\x9f\x7f\xff\x78\x06\xd2\xb1\x1f\x46\xf8\x89\xa4\x8f\xc1\xe6\x61\xb4\x31\xc1\xc5\xf9\x1b\x90\x65\x9f\xb7\x0a\xc4\x76\x9f\x4c\x8e\x3c\x05\x95\x71\xe6\x64\x19\x21\x5b\xc9\xb4\xbf\xdb\x19\xfb\xe7\xbb\x4f\x97\x17\x97\x1f\x26\x87\x40\x1b\x49\xc2\x0f\x0a\xeb\x98\x6e\x80\x5b\xd8\xc4\x25\xe4\x9d\x35\xec\x93\x1e\x17\x04\x2b\x46\x68\xd9\xd1\xa4\xaa\xee\x51\x5f\xb8\x05\xa7\x70\x71\x0e\x3f\x7f\x9d\xed\x5b\x7b\x60\x68\x5e\x99\x32\xa9\xaa\x28\x52\x7a\xbc\x6d\x6c\xc8\x97\xbf\xea\xd4\xbb\x33\xe9\x78\x55\x9d\x96\x3f\x95\xa7\xdf\xe3\x7b\xb3\x0f\x3c\x7d\x3e\x36\x8d\xfd\x54\x27\xe5\xeb\xf2\xd5\x5d\xf4\x14\x72\xfa\xe2\x0b\x05\xcb\xed\xd7\xdc\xcc\x76\x0b\x14\x2c\xec\x76\x7f\x07\x00\x00\xff\xff\x7b\xed\x7f\x6c\x15\x06\x00\x00")

func tmplHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHeaderHtml,
		"tmpl/header.html",
	)
}

func tmplHeaderHtml() (*asset, error) {
	bytes, err := tmplHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/header.html", size: 1557, mode: os.FileMode(420), modTime: time.Unix(1499533139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x6e\xc3\x20\x0c\x86\xef\x3c\x85\xe7\x9d\x33\xb4\xeb\x44\x73\xd9\x93\x10\xec\x2a\x96\x08\xa9\xc0\xe9\x16\x21\xde\x7d\x5a\xb3\x66\xc9\x09\x6c\xff\xfa\x3e\x70\xad\xc4\x57\x49\x0c\x38\xcc\xb4\x62\x6b\xb5\x82\xf2\x74\x8b\x5e\x19\x70\xe2\xb4\x60\x6b\xc6\x91\xdc\x21\x44\x5f\xca\x05\xc3\x9c\xd4\x4b\xe2\x8c\xbd\x31\x00\x00\x8f\xa1\xd0\x05\x33\x5f\x33\x97\x51\x65\x62\xec\x9d\x25\xb9\x3f\x13\xea\x87\xc8\xfd\xe3\xbe\xd5\xf9\xbf\xd8\x1a\x74\x6e\x9c\xb8\xe3\x32\x09\x89\xae\x9f\xa3\xcf\x8a\x50\x74\x8d\x7c\xc1\x61\xce\xc4\xf9\x03\xde\x6f\xdf\x50\xe6\x28\x04\xaf\x21\x84\x5d\x7c\x22\xd9\x23\xdf\xd9\xa7\xde\xd9\xc3\xc3\x76\xdd\xef\xf7\x39\x7b\x5d\x32\x6f\xc6\x23\x72\x4f\x7d\x49\xa2\xf3\xd8\xfc\x9d\xee\xa5\xeb\xc0\xbe\xed\x7b\x82\xae\xeb\x4d\xad\xc0\x89\xa0\xb5\x9f\x00\x00\x00\xff\xff\x34\x24\x24\x35\x71\x01\x00\x00")

func tmplHistoryBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryBodyHtml,
		"tmpl/history/body.html",
	)
}

func tmplHistoryBodyHtml() (*asset, error) {
	bytes, err := tmplHistoryBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/body.html", size: 369, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\x3d\xaf\x9c\x40\x0c\xec\xef\x57\xac\xfc\x6a\xde\xf6\x11\x50\x45\x4a\x8a\x28\xd5\xeb\x23\xc3\xfa\xc0\x7a\x7b\x5e\xb4\x6b\xd0\x9d\x10\xff\x3d\xe2\xeb\x72\x21\xa7\x7c\x34\xa9\xc0\xde\x19\xcf\xc8\xe3\x71\x74\x74\x66\x21\x03\x17\x92\x1e\xa6\xe9\x94\x0b\x0e\xa6\xf6\x98\x52\x01\x82\x43\x85\xd1\xac\x9f\x8c\x65\xa0\x98\x68\x2f\xcf\x7c\x25\x97\x69\xe8\xa0\x3c\x19\x63\x4c\xee\xf8\x4e\xac\x83\x28\xb2\x50\xdc\xde\x8e\xef\xdb\x88\x96\xd0\xfd\x84\x59\x70\x55\xaf\x1a\xc4\xe8\xad\xa3\x02\xd6\x02\x0e\x44\x0d\x4d\xe3\xc9\xd4\xc1\x7b\xec\x12\x39\x30\x0e\x15\xb7\xf6\x2c\xbf\xf6\xf7\x36\xc6\x86\xb4\x80\x97\x95\x0d\x06\x23\x63\x46\xd7\x0e\xc5\x91\x2b\xe0\x8c\x7e\xc6\x2e\xdd\xd9\x79\x0c\xfe\x2e\x75\x34\x97\x3a\x94\xdd\x4c\x8a\x59\x10\x7f\x83\xf2\x6d\xb5\x23\x38\x70\x83\xca\x41\x72\x3b\xe3\x7e\x43\xe5\x3a\x48\xb6\x8c\xff\x5f\xd0\xdc\xae\xab\x3c\xd0\xf1\xb0\xd9\x2a\xa2\x38\x30\x6d\xa4\x73\x01\x2f\x50\x7e\xa5\xa4\xb9\xc5\x87\x18\xad\xe3\xe1\x90\x2a\xbb\xfb\xba\x7e\x5c\xc0\x1a\xc1\x7e\x2d\xf7\x48\x0e\xfa\xbd\x7f\x30\xb0\x83\x05\x87\x03\x6e\xc1\x7a\x2e\x73\xdc\xac\x59\x28\xc7\xf1\xcd\xc0\xe7\x70\x21\x98\xa6\xd9\x62\x6e\x3d\x3f\x65\xed\x0a\x58\x2b\x0f\x47\x07\x0f\x9b\xd8\x26\xb7\x9c\x34\xc4\xdb\x2e\xb0\x55\x7f\xd0\x78\x70\xe6\x43\x03\xe5\x97\xd0\xfc\x25\xbe\x55\xed\xd2\x07\x6b\x1b\xd6\xb6\xaf\x5e\xeb\x70\xb1\x1d\x6a\xe4\xfa\x1d\x3d\x8b\x15\x4a\x9a\xd5\x9e\x49\x34\x6b\x02\x98\xfd\x98\xbf\x55\x1e\xe5\x1d\xca\x4f\x0b\xed\x1f\xb5\x1c\x0d\xe4\x43\x47\x31\xbd\xce\xf3\x17\xd1\x5f\x47\xcf\xd9\x9b\x8f\x2b\x74\xc6\x3e\x17\xc9\x6d\xef\x9f\x9e\xc7\xf6\x9b\x5b\xc1\xa1\x3c\x8d\xa3\x21\x71\x66\x9a\xbe\x07\x00\x00\xff\xff\xa6\x20\xaf\x28\x73\x04\x00\x00")

func tmplHistoryMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryMenuHtml,
		"tmpl/history/menu.html",
	)
}

func tmplHistoryMenuHtml() (*asset, error) {
	bytes, err := tmplHistoryMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/menu.html", size: 1139, mode: os.FileMode(420), modTime: time.Unix(1499540572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x6e\xdb\x38\x16\xbe\xf7\x53\x1c\xa8\x17\x92\x51\x57\xb2\xd3\x76\x17\x70\x93\x60\xb3\x69\xda\x74\x11\x27\x41\x6c\x6c\x67\x26\x08\x06\xb4\x78\x62\xb1\x91\x48\x81\xa4\xec\xba\x86\xde\x69\x9e\x61\x9e\x6c\x40\x49\xb6\x25\x4b\x91\x93\x62\x2e\x8a\x41\x79\x13\x5b\xfc\xce\x0f\x3f\x9e\x73\x3e\x39\xab\x15\xc5\x7b\xc6\x11\x2c\xe5\x4b\x16\x6b\x2b\x4d\x3b\x87\xf9\x47\xd0\xcb\x18\x8f\x2c\x8d\x5f\xb5\xf7\x85\xcc\x49\x01\x00\x25\xfd\x23\x2b\xd0\x3a\x56\x43\xcf\x5b\x2c\x16\xee\x4c\x69\xa2\x99\xef\xfa\x22\xf2\xfc\x80\x48\xad\xbc\x50\x10\x8a\xd2\xfd\xa2\xac\xe3\x43\x2f\x37\x3c\xee\xec\x71\x7c\xdc\x01\x00\x98\x13\x09\x41\x12\x31\xca\xf4\x72\xf3\x80\x48\x49\x96\x13\x8c\x62\x38\x82\xdb\xec\xa9\x59\xb7\x1c\x17\xf0\x9e\x68\x74\x06\x6f\x06\xff\xea\x0f\x5e\x1f\xf4\xcd\xea\xf6\xe0\xe0\xe0\xae\x97\xc1\xee\x3a\xd9\x9f\x05\xe3\x54\x2c\x5c\x42\xe9\xd9\x1c\xb9\xbe\x60\x4a\x23\x47\xe9\x58\x26\x4f\xab\x07\xf7\x09\xf7\x35\x13\xdc\xc1\xb9\xee\xc2\x6a\x13\xc1\xc4\x16\x89\x8e\x13\x0d\x47\x40\x85\x9f\x44\xc8\xb5\x3b\x43\x7d\x16\xa2\xf9\xf8\xdf\xe5\x27\xea\x58\x39\xc2\xea\xbe\xab\xd8\x2d\x54\xf5\x7b\x2c\x19\x37\x6e\x36\xb1\x22\x54\x8a\xcc\xb0\x1c\x6f\x8d\xa5\xe5\x70\xbe\x44\xa2\xb1\x88\xe8\x58\x94\xcd\xcb\xa1\xcc\xa2\x2e\xe3\x1c\xe5\xf9\x64\x74\x01\x47\x50\xf8\xad\x42\xf2\x1c\x5d\x12\xc7\xc8\xe9\x69\xc0\x42\xea\xd0\x92\x97\x74\xfb\x51\x09\xff\x01\x4d\xa2\x86\xdd\xcf\x38\x1d\x67\xdf\x1d\x6b\xb5\x72\x3f\xe3\x34\xdb\x95\x89\x0c\xd3\xb4\x9c\x85\xe7\x5d\x5d\xc2\xd5\xf5\xd9\xe5\x8e\x1b\x57\x70\x11\x23\x2f\x1f\x7b\x87\xe2\xad\x87\x9c\x21\xc7\x32\x6e\x76\x4f\x98\x23\x72\x40\xe1\x39\x96\x42\x0b\x5f\x84\xdd\x7d\x40\x89\x84\x2e\xc7\x9a\x68\xdc\x0b\x4d\x64\x83\xbb\x62\x4f\x21\x37\x77\x1d\x23\xb7\xaa\x98\xb4\xb3\x73\x8e\xab\x4b\x38\xbb\xb9\xb9\xba\xa9\x73\x81\x52\x0a\x59\x21\xc3\x3c\xd8\xa5\xc3\x17\x5c\x89\x10\xdd\x6c\xb3\x80\x54\xe9\xc8\x93\xde\xdd\xa9\x5d\xa2\x2b\xb8\x1f\x0a\x85\x7b\xe8\x2f\x78\x3f\x9c\x1e\x9f\x0a\xce\x31\xc3\x41\x66\x48\xdd\x43\x6f\x7a\x6c\x35\xc7\xc8\x4f\x3a\x3a\x1b\x8f\x4f\x3e\x9e\xd5\x23\x17\x65\xf8\x84\xab\x37\x15\xef\x27\x52\x22\xd7\x94\x68\x2c\x4a\x2f\x6b\xec\x86\x32\xc8\xfa\x83\x68\xd4\x2c\x32\x50\x7b\xb5\x9a\x80\x75\x41\x94\x86\xf1\x92\xfb\x56\x9a\x0e\xc1\x86\x97\x65\x87\xa6\x61\x73\x6f\xf0\x12\x2c\xcf\x82\x97\x35\xa7\x66\x39\x3b\x26\x23\xc1\x75\x90\xd9\x0c\xda\x0d\x77\xec\x3e\x24\x61\xf8\x2b\x12\x99\x87\x83\xff\xc0\x13\xed\xce\x45\x22\x55\x6e\x34\x7c\xa2\xc9\x88\xf1\x44\xe3\x33\x8d\xc6\xe8\x0b\x4e\x55\x13\xb7\x8f\x8e\x38\x89\xf7\x12\x55\x60\x38\xb7\xba\x95\x69\xb3\xbe\x8a\x77\x9d\x86\xe6\x9a\x08\x50\x81\x58\x80\x0e\xd0\x00\x09\xd4\x41\x4a\x9b\x86\xc0\xb9\x76\x0d\xc0\x55\x71\xc8\xb4\x63\x8d\xcf\xae\x4f\x6e\x4e\x26\x57\x37\xa6\xf6\x6a\x36\x6b\x7d\x80\x23\xf8\xdf\xf8\xea\xd2\x8d\x89\x54\xe8\x28\x2d\x6f\xfb\x77\x5d\x97\xe2\x9c\xf9\xa8\x5c\x1d\xa0\x8c\x84\xd1\x26\xe5\x72\x71\x89\x48\x91\xba\x6b\xd3\x06\xaf\x54\x92\xc5\x79\xb1\x7d\x8d\xd2\x47\xae\xc9\x2c\x2b\xc1\x1a\xb4\xac\x47\x38\x27\x61\x16\x7b\x70\xd7\x6d\x76\x6a\x80\x28\x89\x4e\x64\x8b\xb7\xcf\x8c\xd3\xb2\xb7\x83\xc7\xbc\x19\xe0\xee\xdd\xa5\xe0\x79\xc8\x29\x08\xbe\x9e\xfe\xb9\x6d\x6a\xc2\x75\xf2\xbb\x38\x3d\x3f\xb9\x99\x8c\xf3\x6f\x33\x21\x66\x21\xba\xb9\x58\xbb\x46\x04\x1d\xbb\xa8\x12\xbb\x57\xea\xd0\x98\xf8\x0f\x64\x86\x6a\x08\xb7\xb6\x2f\x24\x66\x06\x76\x0f\xec\x90\x71\xb4\xef\x36\x31\xea\x3e\x15\xea\x2b\x7e\x21\x08\x3d\x25\x61\x38\x25\xfe\x83\xb3\xc3\xc4\x33\xac\xea\x97\xb2\x39\xd6\x7a\xb4\x3c\x7a\x79\xb0\xea\x94\x07\xd6\xfb\xfc\x65\xc7\xd4\x63\x16\x12\xb4\x80\x29\x66\xd6\xdc\xad\xc8\x75\x56\xae\xf9\x24\x2a\x72\x9c\x33\x95\x90\x90\x7d\x23\x26\xa0\xfb\x9e\x68\x32\x21\xd3\xb0\x32\xa3\xb2\x12\x26\x94\x9e\x8a\x30\x89\xb8\x63\x2b\x2d\x19\x9f\x19\xc2\x8a\x6e\xb2\x5b\xc0\x3c\x89\xa6\x28\x0d\x78\x7b\x80\x26\xfc\x8d\x58\x28\xe7\xb6\x72\xff\xb7\xf6\xfa\xec\x76\x6f\xd3\x1d\xc5\x2b\xd0\x16\xf3\xbb\xdd\x83\x41\xbf\x0f\xaf\x9a\x20\x77\xe5\xca\xf4\x3c\xf8\xc4\x95\x26\x5c\x33\x33\x90\x09\xa7\x19\x45\x5b\xde\xaa\x5c\x65\x8f\xb2\x0c\x96\x6d\x94\x5d\x33\x3c\x35\x48\xe7\xb1\x31\x63\xaf\xf3\xca\x60\x76\xb7\x74\xf8\x52\x08\xd7\xa4\xe2\x18\x36\x7a\xc0\x93\x30\x2c\x50\x69\x43\x45\x54\x3a\xaf\x5c\x0a\x7f\xdb\x0d\x9b\xf1\x67\xae\xec\x97\xa7\xdd\x6c\x29\x21\xbb\x4c\x78\xe5\x6e\x37\xd3\xa5\x8c\xc8\x5e\x45\x63\x93\x98\x82\xa3\x1d\x11\x0d\x4e\xbe\x32\x35\x6c\x50\x56\xcd\x74\x88\x43\xb0\x27\x2c\x42\xbb\x57\xdb\xbe\x17\x32\x22\x7a\x08\xf6\xf9\x30\x6a\xd8\x8e\x18\xff\x3f\x09\x13\x1c\x6e\xf5\xf8\xa0\x3f\x78\x63\x8a\xa8\x07\xe6\xef\xc1\xa0\x07\xaf\xfb\xdd\x06\x4b\xf2\xb5\xc5\xf2\x6d\x0f\x1e\x33\x9c\x49\x46\xcd\x6c\x69\x3c\x4d\x56\x07\x22\xe1\x7a\x08\xaf\x06\x75\x5b\xb3\x12\xce\xf4\xa3\xb6\x90\x11\xbd\x6c\xdd\x2f\xd3\x72\x6b\x8f\x46\x23\xa0\xb4\x18\x74\x4d\x2b\x6d\x4e\xc3\xac\xc0\xc8\xf9\xd3\x43\x9d\x9f\x0f\xa3\xc8\x94\x48\x40\x9e\x1f\x2f\xad\x3d\x6d\x00\x46\x8c\x0b\xf9\x71\x1f\xc1\x7b\x19\x7c\xe6\xb9\x82\x60\x18\x45\x43\xa5\x80\x7c\xef\xe1\x8a\xdc\xcd\x8b\xce\x33\xe9\x04\x02\xbf\x99\xa8\x86\xd9\x96\xb0\x4f\xa5\xb4\xd3\x92\xec\x7c\x6f\x0b\x96\x3a\xbf\xa5\x13\x5f\xf4\x5e\xbc\xf8\xf3\x8f\xd3\xa6\x6e\xdc\xf4\xd4\xc1\xbf\xdb\x7a\xf5\xd5\xdb\xb6\x3c\xcd\xbc\xfa\xb0\x0e\x36\x1a\xb9\x94\x42\x76\x43\x3b\x01\x63\xc1\xb8\x1e\xb3\x6f\x38\x34\x2d\xdb\xb0\x15\x90\xd8\x9c\x4a\x4b\x46\xf8\x2c\x44\xbb\xfc\x03\xa1\xae\x0d\xc5\xab\xd2\xa3\xa3\xf6\x82\xf1\x7d\xd2\xa0\xb7\xfc\x6d\xd5\xa1\x2a\x0f\x26\x4a\x59\x1c\x8a\x71\xd9\xa2\x0f\xf9\xbb\xd4\x8f\x20\x0c\x26\x93\x3d\x8a\x60\x20\x3f\x15\xa1\xb6\x7e\x2a\x42\xe3\xe3\x9f\x8a\xb0\x13\xf6\x87\x53\x84\xac\xe5\xf7\x48\xc1\x43\xe4\x05\xad\x5a\x30\xe8\xf7\xdb\xda\xb4\xff\x8f\xd4\x82\x05\xe3\xf4\x7b\x45\x60\xfb\xef\xe8\xd5\x0a\xcc\x6f\xe6\x34\xfd\x2b\x00\x00\xff\xff\x49\x85\x21\x8e\x04\x17\x00\x00")

func tmplHistoryScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryScriptHtml,
		"tmpl/history/script.html",
	)
}

func tmplHistoryScriptHtml() (*asset, error) {
	bytes, err := tmplHistoryScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/script.html", size: 5892, mode: os.FileMode(420), modTime: time.Unix(1500580618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xd1\x09\xc2\x50\x0c\x45\xff\x33\xc5\xe5\x0d\xa0\x0b\x3c\xba\x84\x13\x54\x73\xa5\x85\xf6\x59\xda\xfc\x48\xc8\xee\x12\x2b\x48\xa1\xbf\x27\x27\x87\xeb\x0e\xe5\x73\x6c\x44\x69\xdc\xac\x20\x42\xea\x60\xf3\xd4\x89\xd4\x81\xbd\x76\x02\x00\xee\x30\xce\xcb\xd4\x1b\x51\x12\x73\x2d\x97\x88\x23\xdf\x1e\xeb\xb8\x58\x72\xa9\xd7\xfd\x57\xea\xfd\xa5\xef\x93\x46\xe2\x9f\xb9\x1b\x87\x2b\x9b\xde\xfe\xb1\xac\x7d\x17\xb9\x83\x4d\x11\xf1\x09\x00\x00\xff\xff\xd0\x1f\xbc\x12\xb6\x00\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 182, mode: os.FileMode(420), modTime: time.Unix(1499533139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x4f\x33\x21\x10\xc6\xef\x7c\x8a\x09\xe9\xf1\x7d\xbb\x1e\x3c\x19\x76\x8f\x3d\xb5\x89\x31\x1e\x7b\xa1\xcb\x48\x89\x2c\x34\x30\x5d\xd3\x10\xbe\xbb\x59\xa8\xd6\xd8\xae\x7a\x21\xcc\x3c\x3f\xe6\xcf\x13\x52\x52\xf8\x62\x1c\x02\xdf\x79\x75\xe2\x39\xa7\x04\x84\xc3\xc1\x4a\x42\xe0\x03\xba\x23\xcf\x99\x09\x65\x46\xe8\xad\x8c\xb1\xe5\xbd\x77\x24\x8d\xc3\xc0\x3b\xc6\x00\x00\xc4\x2e\x74\xf5\x42\x72\x67\xf1\x83\xab\x41\x39\xff\x47\x0a\xe6\x80\x8a\x57\xae\xb2\xe1\x12\xd4\xc4\xbe\x83\xf5\x34\x89\x68\x68\x7f\x43\x7b\x36\xc3\xac\xb6\xc6\x11\xed\x9c\xb8\xf2\xae\x27\xe3\xdd\x9c\xbe\xc1\x18\xa5\x9e\xad\xfd\x28\x83\x1c\x90\x30\x7c\x03\x44\xf3\x75\x85\x94\x20\x48\xa7\x11\x16\xaf\x78\xfa\x07\x8b\x51\xda\x23\xc2\x43\x0b\x4b\xeb\xf5\x53\x51\x72\xfe\x79\x7b\x11\x29\x78\xa7\xbb\x94\x4a\x11\xc8\x59\x34\xe7\xd4\xed\xd1\x26\xb0\xf4\x59\x16\x6f\x26\xfe\x16\x26\xcc\xa0\x21\x86\xbe\xe5\xdb\x48\x92\x4c\xbf\xbd\x3c\xac\xc6\xe5\xbc\x3c\x38\xcd\xe1\xcd\x28\xda\xb7\xfc\xfe\x8e\xff\xda\x71\xd5\xd3\x6c\xc3\x0b\xb5\x89\xfa\x0f\x54\x71\xf8\x8a\xbb\xf2\x17\x9d\x9a\x3c\x64\x67\x71\xfa\x58\x1d\x63\xa2\x51\x66\xec\xd8\xa7\xfe\x1e\x00\x00\xff\xff\xec\x13\x5d\x11\xd1\x02\x00\x00")

func tmplLogBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogBodyHtml,
		"tmpl/log/body.html",
	)
}

func tmplLogBodyHtml() (*asset, error) {
	bytes, err := tmplLogBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/body.html", size: 721, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\x3d\x6f\xdb\x40\x0c\xdd\xfd\x2b\x0e\xcc\xac\xdc\x5e\xc8\x9a\x0a\xb4\x43\xd1\x29\x7b\x41\xe9\x68\x89\xc8\x99\x27\xdc\x51\x42\x0c\x41\xff\xbd\xd0\xa7\x1d\x35\x48\xd1\xa5\x93\x4d\xde\x7b\x7c\x4f\x7c\x1c\x06\x47\x17\x16\x32\x70\x25\xe9\x60\x1c\x4f\xb9\x60\x6f\x2a\x8f\x29\x9d\x41\xb0\x2f\x31\x9a\xe5\x27\x63\xe9\x29\x26\xda\xca\x0b\xbf\x91\xcb\x34\xb4\x50\x9c\x8c\x31\x26\x77\xbc\x13\xab\x20\x8a\x2c\x14\xd7\xb7\xe3\xfb\x3a\xa2\x21\x74\xef\x30\x33\xae\xec\x54\x83\x18\xbd\xb5\x74\x86\xa5\x80\x03\x51\x43\x5d\x7b\x32\x55\xf0\x1e\xdb\x44\x0e\x8c\x43\xc5\xb5\x3d\xc9\x2f\xfd\xad\x8d\xb1\x26\x3d\xc3\xd3\xc2\x06\x83\x91\x31\xa3\xb7\x16\xc5\x91\x3b\xc3\x05\xfd\x84\x9d\xbb\x93\xf3\x18\xfc\x2e\x75\x34\x97\x5a\x94\xcd\x4c\x8a\x59\x10\x7f\x83\xe2\x65\xb1\x23\xd8\x73\x8d\xca\x41\x72\x3b\xe1\x3e\xa1\x72\x15\x24\x9b\xc7\xff\x2f\x68\x6e\x97\x55\x1e\xe8\x78\xd8\x6c\x19\x51\x1c\x98\x26\xd2\xe5\x0c\x4f\x50\xfc\xa4\xa4\xb9\xc5\x87\x18\xad\xe3\xfe\x90\x2a\xbb\x7d\x5d\xf7\x0b\x58\x22\xd8\xae\x65\x8f\xe4\xa0\xdf\xf9\x07\x03\x1b\x58\xb0\x3f\xe0\x66\xac\xe7\x22\xc7\xd5\x9a\x85\x62\x18\x5e\x0c\x7c\x0f\x57\x82\x71\x9c\x2c\xe6\xd6\xf3\xc7\x2c\x73\xa7\x35\x9c\x34\xc4\xdb\xc6\x5e\xab\xbf\x0c\xd8\x2c\x62\xa5\xdc\x1f\x3f\xe1\x61\x95\xab\x86\x0f\x35\x14\x3f\x42\xfd\xb9\xa9\x1d\xdf\xa8\xb6\xe9\x8b\xb5\x35\x6b\xd3\x95\xcf\x55\xb8\xda\x16\x35\x72\xf5\x8a\x9e\xc5\x0a\x25\xcd\x2a\xcf\x24\x9a\xd5\x01\xcc\x76\xcd\xbf\x4a\x8f\xf2\x0a\xc5\xb7\x99\xf6\x8f\x5a\x8e\x7a\xf2\xa1\xa5\x98\x9e\xa7\xf9\xb3\xe8\x9f\xa3\xa7\xf0\xcd\xd7\x05\x3a\x61\xef\x22\xef\x43\xb4\x9d\xff\xf0\x40\xd6\xbf\xb9\x15\xec\x8b\xd3\x30\x18\x12\x67\xc6\xf1\x77\x00\x00\x00\xff\xff\x00\xe5\xad\x41\x75\x04\x00\x00")

func tmplLogMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogMenuHtml,
		"tmpl/log/menu.html",
	)
}

func tmplLogMenuHtml() (*asset, error) {
	bytes, err := tmplLogMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/menu.html", size: 1141, mode: os.FileMode(420), modTime: time.Unix(1499540566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x2a\x4e\x2e\xca\x2c\x28\x51\xaa\xad\x55\xa8\xae\x56\x48\xcd\x4b\x51\xa8\xad\x05\x04\x00\x00\xff\xff\x3e\x13\xcc\xb1\x1d\x00\x00\x00")

func tmplLogScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogScriptHtml,
		"tmpl/log/script.html",
	)
}

func tmplLogScriptHtml() (*asset, error) {
	bytes, err := tmplLogScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/script.html", size: 29, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplNestBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x96\x4d\x8b\xdb\x3c\x10\xc7\xef\xf9\x14\xf3\x08\x9e\xde\x1c\x17\x16\xf6\x52\xc7\x50\x5a\xe8\x16\x4a\x2f\xdd\x7b\x50\xac\x89\x3d\x60\xbd\x20\x4d\x62\x82\xf1\x77\x2f\x56\xe2\xad\xe3\x75\x4b\x5f\xe2\xb2\xd0\x4b\x88\xe6\x3f\xf3\x1f\xcd\xcf\x3a\x4c\xdb\x2a\xdc\x93\x41\x10\x3b\xab\x4e\xa2\xeb\xa0\x6d\x81\x51\xbb\x5a\x32\x82\xd0\x68\x0e\xa2\xeb\x56\x99\xa2\x23\x14\xb5\x0c\x61\x23\x0a\x6b\x58\x92\x41\x2f\xf2\x15\x00\xc0\x58\xf3\xb6\xb9\x44\xa7\x4a\x61\xeb\x44\xab\xe4\x6e\x24\xc7\x14\xd2\x25\x04\x5f\x6c\x44\x1a\x58\x32\x15\xa9\xc1\xc0\x6b\x67\x4a\x01\x0d\x29\xae\x36\xf7\xaf\xff\x9f\x94\xb8\xc1\xb3\x46\xa9\x44\xde\xb6\x8f\x20\x3e\x63\x60\x28\x6a\x42\xc3\x40\x06\x3e\x58\xd1\x75\x59\xea\x26\x95\xfd\x7d\x48\x6d\x04\x93\xc6\xc0\x52\x3b\x91\x67\xa9\xa2\xe3\xe8\xca\x93\xe3\x7f\x49\x92\xae\xfb\x32\xad\xee\x20\x49\xf2\xd5\x8f\x86\xbb\x17\x23\x3d\xe6\xec\xfc\x34\x32\x5c\xc1\x1e\xd8\x1d\x58\xe4\x43\xc7\xeb\x2c\x96\xbb\x1a\x07\xf7\xf3\x21\xfe\x26\x81\x3d\x39\x54\x13\x8a\xe7\x1a\xff\x3c\x78\x16\x54\x9e\xd1\x60\xd6\x10\x34\x94\x70\x85\x5e\x5b\x8d\xdc\x7f\xc5\x2c\xa5\x1c\x22\xc5\xb7\x7a\x17\x09\x3e\xa2\x76\xe8\x25\x1f\x3c\xbe\x8b\x20\x59\x7d\xdf\x7b\x56\xb8\x9a\x55\x9e\x6d\xb7\xfc\xcd\x76\x5b\x3c\x43\x7f\x55\xba\x40\xc7\xfd\x6f\x74\xcc\xd2\x39\xaa\x37\x41\xdd\xc8\xd3\x98\x33\x3c\x50\x59\xc1\x4d\x68\x37\xf2\x74\x35\x78\x45\x65\xb5\x34\xef\xd9\x9e\x2f\x9c\xf8\x27\xdb\x2c\x03\xbc\xb6\xcd\xdf\xe6\xdd\xb7\xfc\x19\xdc\x4b\xf0\xae\x0e\x9a\x14\xf1\x69\x0c\xfb\x61\x88\x75\xdd\x1f\x0f\x3b\xf6\xbf\x35\xd1\x57\x66\x17\xdc\x9b\x85\xdf\x67\x70\xd2\x0c\xc8\xca\xfa\xe4\x2a\x2a\xac\x81\x99\x7f\x49\x61\xcb\x7e\xca\xbe\xe0\x02\xf2\x3d\x1e\xa9\x40\xf8\xa8\x6e\xf0\x50\x55\xf4\xda\x92\xfa\x27\x49\x7e\xb1\x7b\x6e\xa4\x47\x38\xa2\x0f\x64\xcd\x0d\x80\x86\x8b\xe5\x76\xb0\x7c\x99\x5c\xb3\x34\x2e\x0f\x73\xcb\xc9\xec\x58\x1e\xf7\x1e\x43\xd5\x6f\x49\x4f\x13\xad\x7e\x71\x45\x1a\x65\xf5\x19\x90\xae\xbd\x6d\xa2\x7c\x51\x2e\xd1\xa7\x6d\x32\x6a\x6d\x0b\x68\x14\x74\xdd\xd7\x00\x00\x00\xff\xff\x4f\xa1\xfe\xae\x98\x0a\x00\x00")

func tmplNestBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplNestBodyHtml,
		"tmpl/nest/body.html",
	)
}

func tmplNestBodyHtml() (*asset, error) {
	bytes, err := tmplNestBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/nest/body.html", size: 2712, mode: os.FileMode(420), modTime: time.Unix(1500579654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplNestMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4d\x8f\x9c\x30\x0c\x86\xef\xf3\x2b\x22\xef\x99\xcd\xbd\x02\x4e\x95\xda\x43\xd5\xd3\xde\x2b\x43\x3c\x60\x6d\xc6\x41\x89\x41\x3b\x42\xfc\xf7\x8a\xaf\x99\x59\xba\xea\xc7\xa5\x27\x88\xf3\xbc\xaf\x1d\xdb\xe3\xe8\xe8\xcc\x42\x06\x2e\x24\x3d\x4c\xd3\x29\x17\x1c\x4c\xed\x31\xa5\x02\x04\x87\x0a\xa3\x59\x3f\x19\xcb\x40\x31\xd1\x7e\x3c\xf3\x1b\xb9\x4c\x43\x07\xe5\xc9\x18\x63\x72\xc7\x37\x61\x1d\x44\x91\x85\xe2\x76\x77\xbc\xdf\x2c\x5a\x42\xf7\x8e\x59\xb8\xaa\x57\x0d\x62\xf4\xda\x51\x01\xeb\x01\x0e\x42\x0d\x4d\xe3\xc9\xd4\xc1\x7b\xec\x12\x39\x30\x0e\x15\xb7\xf0\x9c\x7e\x8d\xef\x61\x8c\x0d\x69\x01\x4f\xab\x1a\x0c\x46\xc6\x8c\xde\x3a\x14\x47\xae\x80\x33\xfa\x99\x5d\xa2\x73\xe5\x31\xf8\x5b\xaa\x63\x71\xa9\x43\xd9\x8b\x49\x31\x0b\xe2\xaf\x50\xbe\xac\xe5\x08\x0e\xdc\xa0\x72\x90\xdc\xce\xdc\x6f\xa4\x5c\x07\xc9\x16\xfb\xff\x85\xe6\x76\x6d\xe5\x41\x8e\x87\xce\x56\x11\xc5\x81\x69\x23\x9d\x0b\x78\x82\xf2\x3b\x25\xcd\x2d\x3e\x8c\xd1\x3a\x1e\x0e\x53\x65\x77\x6b\xd7\x7d\x03\xd6\x11\xec\xdb\x72\x1b\xc9\x21\x7f\xef\x1f\x0a\xd8\x61\xc1\xe1\xc0\x2d\xac\xe7\x9d\xc5\x5a\x79\x38\x7a\x3d\xbc\x69\x2d\xdf\x42\x39\x8e\x2f\x06\xbe\x86\x0b\xc1\x34\xcd\xcf\xc8\xad\xe7\x0f\x9d\xcb\x07\x59\xcb\x49\x43\xbc\xee\xea\xed\xf4\x27\x83\xbb\xde\x87\x06\xca\x6f\xa1\xf9\x4b\xbe\x55\xed\xd2\x27\x6b\x1b\xd6\xb6\xaf\x9e\xeb\x70\xb1\x1d\x6a\xe4\xfa\x15\x3d\x8b\x15\x4a\x9a\xd5\x9e\x49\x34\x6b\x02\x98\x7d\x9b\x7f\x54\x1e\xe5\x15\xca\x2f\x8b\xec\x1f\x73\x39\x1a\xc8\x87\x8e\x62\x7a\x9e\xfd\x97\xa4\xbf\x5a\xcf\xc3\x37\x9f\x57\x74\x66\xef\x49\xde\x0f\xd1\xf6\xfe\xc3\x05\xd9\x7e\x73\x2b\x38\x94\xa7\x71\x34\x24\xce\x4c\xd3\xcf\x00\x00\x00\xff\xff\x95\xae\x10\x23\x75\x04\x00\x00")

func tmplNestMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplNestMenuHtml,
		"tmpl/nest/menu.html",
	)
}

func tmplNestMenuHtml() (*asset, error) {
	bytes, err := tmplNestMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/nest/menu.html", size: 1141, mode: os.FileMode(420), modTime: time.Unix(1499540719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplNestScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdf\x6f\xda\x48\x10\x7e\xcf\x5f\xb1\xda\x17\x8c\xd2\x33\xbd\xd7\x86\xa0\xcb\xb5\xf4\x7a\x51\x80\x0a\x90\xaa\x53\x5a\x45\xcb\xee\x80\xf7\xce\xde\xb5\x76\xc7\x58\x08\xf9\x7f\x3f\xad\x7f\x10\xdb\x18\x01\x55\xea\x27\x4f\xf6\x9b\xef\x9b\xf9\x3c\xb3\x49\xf6\x7b\x01\x6b\xa9\x80\x50\xcb\x8d\x8c\x91\x66\xd9\xcd\xb0\x78\x1d\xdd\x10\x42\x48\x2a\x95\xd0\xa9\xcf\x84\x18\x6f\x41\xe1\x93\xb4\x08\x0a\x8c\x47\x43\xcd\x04\x7d\x47\xd6\x89\xe2\x28\xb5\xf2\x60\x8b\x7d\xb2\xcf\x73\xdc\xb3\x65\x86\xe8\x04\xe3\x04\xc9\x3d\x11\x9a\x27\x11\x28\xf4\x37\x80\xe3\x10\xdc\xeb\x9f\xbb\xbf\x85\x47\x0b\x04\xed\xdf\x35\xf2\x52\xdb\x8c\x63\x23\x95\xa3\x39\x68\x45\x60\x2d\xdb\x40\x5d\xaf\xc2\x8a\xba\x1c\x37\xc0\x10\x4a\x45\x8f\x0a\xb9\xad\x4b\xb9\x47\xf8\x52\x29\x30\x5f\x96\x93\x27\x72\x4f\x4a\xde\x26\xa4\xa8\xd1\x67\x71\x0c\x4a\x7c\x0c\x64\x28\x3c\x51\x63\xc9\x5e\x5f\xad\xe6\xff\x81\x2b\x54\x41\x4a\xbe\xc1\x6a\x91\xc7\x1e\xdd\xef\xfd\x6f\xb0\xca\x4f\x4d\x62\xc2\x2c\xab\x57\x31\x18\xcc\xa6\x64\xf6\x75\x3c\x6d\xd1\xf8\x5a\xe9\x18\x54\xbd\xed\x96\xc5\xaf\x0c\x85\x43\x1e\x75\x34\xed\x0e\x0b\x44\x01\x28\x99\x63\xa3\x51\x73\x1d\xf6\xcf\x01\x0d\x30\xb1\x5b\x20\x43\x38\x0b\x4d\x4c\x07\x5d\x79\x66\x41\xb9\x6f\x1d\x83\xa2\x4d\x4c\x76\xd3\xea\x63\x36\x25\xe3\xf9\x7c\x36\x3f\xf6\x02\x8c\xd1\xa6\x61\x86\xfb\x41\xdb\x0e\xae\x95\xd5\x21\xf8\xf9\x61\x09\x69\xda\x51\x14\xdd\x3e\x39\xfa\x88\xbe\x56\x3c\xd4\x16\xce\xd8\x5f\xfa\x3e\x5c\x8d\x3e\x6a\xa5\x20\xc7\x91\x3c\x51\xf8\xc3\xc1\x6a\x44\xbb\x35\x8a\x4e\x27\xe3\xc5\xe2\xe1\xaf\xf1\xb1\x72\x39\x86\x67\xb4\xdd\xb4\xf3\xc4\x18\x50\x28\x18\x42\x39\x76\x9f\x18\x82\xd7\xea\x39\xdf\x0b\x86\x80\x32\x72\xb0\xde\x7e\xbf\x24\xf4\x89\x59\x24\x8b\x9d\xe2\x34\xcb\x3e\x90\x1e\xb9\xad\x93\xb9\x45\x2d\x98\xc8\x2d\xa1\x03\x4a\x6e\x8f\xbe\xad\xd7\x82\x4f\xb4\xc2\x20\xc7\xff\x7e\x3a\xa9\x95\xf3\x39\x09\xc3\x7f\x80\x99\x42\x86\xfc\x41\x2e\xc8\xf9\xa2\x13\x63\x8b\x84\x0f\x17\xc0\x27\x52\x25\x08\x57\x24\x2c\x80\x6b\x25\x6c\xdb\xc3\x93\x57\x98\x81\xb5\x01\x1b\x38\x6f\x69\xbf\x71\x9b\x54\x96\xdf\xdd\xb4\xc6\x7c\xa9\x89\x0d\x74\x4a\x30\x00\x07\x62\xa4\x75\x5e\x4e\x55\x39\x1f\xed\x85\xae\x66\x3c\xd4\x1b\x37\x16\xbe\x63\xe8\x37\x25\x2c\xba\x55\xa9\x0e\x7d\x1b\x87\x12\x3d\xba\x18\x7f\x7d\x98\x3f\x2c\x67\x73\xc7\x78\x34\x20\xff\x5a\xed\x2e\x9b\xc7\xc5\x6c\xea\xc7\xcc\x58\xf0\x2c\x9a\xe7\xf7\x3f\xda\xd8\xc1\x80\xac\x12\x19\x8a\xbc\xbd\x23\x16\x76\x66\x0c\x23\x37\x25\x96\xdc\x93\xe7\x62\x0a\x1f\x99\xa2\x59\xd6\x7b\x57\x0e\xe5\x67\x58\xd5\xc3\x09\x33\xf5\xf0\x21\x36\xcd\xd3\x5d\x3d\x7c\x4c\x54\x33\x0c\x1b\xb9\xc9\xa6\x1e\x2e\x20\xae\x87\x33\x8e\xf5\x70\xaa\xb7\xf5\xf0\x13\xb8\x25\xe9\xfd\x38\x6e\x67\x07\xcc\x39\xcd\x9a\xc3\x7c\xa2\x6d\xf7\x0b\x26\x6f\xff\x99\xd5\x16\xa6\x83\xb5\x5c\x67\xf6\xba\x85\xc7\x98\x40\x27\x07\xe5\x72\x25\x3a\x64\xa5\xaa\x30\x87\x3d\x38\x46\x59\xe0\x15\xea\xc4\xf0\x3b\xd4\x5a\x9b\x88\x21\x82\x58\xca\x08\xde\x97\xe3\x4d\x6e\x49\x2f\xbf\x3b\x8a\x06\xab\x28\xb7\xa5\x0a\xf2\x4a\x6f\x49\xef\x43\x8e\x93\xea\xf0\x6e\x81\x5f\xb8\x63\x6e\x8b\x2c\xb2\x28\x6e\x6d\x58\xb3\xa6\xd6\xa0\x9e\x64\x63\xd1\x4a\x82\xc2\x17\x84\x28\x06\xc3\x30\x31\xf0\xb2\x6e\x31\xbb\x6d\xf0\x05\x6c\x25\x07\xeb\x63\x00\x26\xd2\x16\x19\x5a\x5f\xe9\x29\x80\x00\xe1\x77\xb2\xe4\xd7\xd8\x50\x12\x1e\x32\x6b\xef\xbf\xd3\x54\x92\x54\xfe\xb6\x66\x81\x01\x15\x80\xc4\xef\x74\x34\x1c\xc8\x11\xbd\xb0\xef\x2e\x0d\xfe\x26\x95\xf2\xee\x4a\x39\x84\x56\x26\xf6\xda\x32\x53\xb6\x6b\xb0\x07\x72\x13\xfc\x8c\xa5\xdd\x3c\x6f\x6d\x6a\xa7\xca\x4f\xd8\xda\xcd\xf3\x4b\x8d\x0d\x75\xfa\x16\xbe\xe6\x34\xbf\xda\x56\x27\xf2\x06\xae\xe6\x34\x17\x9a\x7a\x59\xa5\x41\x12\x49\x21\x71\x77\x75\x6d\x55\x62\x77\x35\xd5\xe9\x95\xbe\x15\x8a\x2f\x52\x5c\x5d\xce\x21\xf3\x42\x25\xab\xd7\x98\x32\x03\x2f\x5b\x30\x56\x6a\x75\xb5\x60\x9b\xa0\x66\x78\xf1\x97\x7c\xd6\xbf\xbb\x19\x0e\xaa\x7f\x1f\xf7\x7b\x02\x4a\x90\x2c\xfb\x3f\x00\x00\xff\xff\x6d\x76\x38\xaa\x65\x0e\x00\x00")

func tmplNestScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplNestScriptHtml,
		"tmpl/nest/script.html",
	)
}

func tmplNestScriptHtml() (*asset, error) {
	bytes, err := tmplNestScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/nest/script.html", size: 3685, mode: os.FileMode(420), modTime: time.Unix(1500580056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplNestTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\xca\xc2\x30\x10\x46\xd7\xcd\x29\x86\xc2\xbf\xfc\x75\xef\x4e\x5a\xd0\x82\xb8\xb1\xb8\x8f\x76\xd4\x40\xd3\x4a\x3a\xb5\x94\x30\x77\xf2\x0c\x9e\xcc\xc5\x24\xa0\xd0\x3a\xdb\xf7\x5e\xf8\xa2\xfe\xa7\x4e\xed\xb1\x23\xf0\x7e\xb1\x41\xda\xe9\x8e\x32\x5d\xd7\xcc\x33\xae\xf7\x25\xa4\x39\x3e\xcc\x19\xa1\xa8\x52\x66\x58\x25\x09\x84\x93\x37\x84\x16\x39\xb3\xd8\x87\xf6\x42\x83\x76\x08\x47\x74\x9d\x69\x9b\x10\x89\x1c\x61\x60\xb1\x59\xdb\x93\xc1\x86\xa0\x44\x7b\x47\xa7\xa9\x77\x98\x7d\x75\x41\xf8\xe4\xcc\xaf\x67\x26\x79\xa9\xdd\x15\x7f\xd4\xc2\x67\xe2\x6d\x6f\x4d\x65\x68\x9c\xfc\x5c\x84\xcc\x7f\x61\xe9\xa0\x47\x58\xc2\xad\xb5\x28\x41\xf4\xe3\xd0\x41\x8f\xcc\x4a\xbd\x03\x00\x00\xff\xff\x1c\x75\x9d\x6c\x7c\x01\x00\x00")

func tmplNestTxtBytes() ([]byte, error) {
	return bindataRead(
		_tmplNestTxt,
		"tmpl/nest.txt",
	)
}

func tmplNestTxt() (*asset, error) {
	bytes, err := tmplNestTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/nest.txt", size: 380, mode: os.FileMode(420), modTime: time.Unix(1500564014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langEnUsAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x82\xf0\x1c\xe4\x00\x59\xb3\xb4\x5b\x87\x2e\x9d\x04\xa2\x62\x2d\x01\xfa\x09\x28\xba\x85\x60\xe8\xee\x85\x1c\xa7\x71\x2b\xa3\x31\xb2\x19\xf6\xf7\x3e\x92\x7e\xe3\x0e\xa0\x3b\x59\xc9\xdd\x11\xea\x33\x40\x17\xc5\x10\x77\xc7\xf9\xf5\x0e\xa0\xec\xa1\x52\x5a\x69\xcc\x69\xc1\x05\xaa\xd4\x38\x1e\x4e\x71\x08\x52\x0a\x68\xcc\xdd\xfe\x8f\xe4\xf7\xe7\x74\xf1\x55\x9d\xcf\xca\x90\xed\x8d\x28\x1b\x94\x27\x21\x6e\xdd\xcf\x80\x1e\x16\x86\x09\x03\x41\xe7\x0e\xcd\xa0\x55\x36\xcd\xf0\xcf\xd4\x33\x71\x8a\x41\xf5\x4c\x24\x36\xf4\x2b\x57\x3f\x91\x73\xb1\x8a\x5e\x26\xb4\x94\x26\x3c\x04\x26\xd4\x8a\x3c\x5a\xa7\xde\xeb\xb8\xb5\x9f\x72\x8d\x83\xc1\xb4\xdc\xeb\x92\x86\x29\xdd\x5e\xb1\x31\x98\xda\x93\xda\xad\x94\x58\x4f\x1f\x8c\x9e\x1e\xdd\x0f\x6c\x00\x31\x04\x67\x4c\x52\x99\xd7\xab\xb0\x94\xc7\x57\xff\x57\x7a\xbb\x8a\x63\xcf\xe8\xef\x37\xf5\x15\xd9\xe9\x5b\x2e\xc7\x81\xb7\x34\xf4\x16\x07\x30\xf8\x49\xdb\xab\xb9\x97\x98\x3b\xd9\x95\xef\x00\x00\x00\xff\xff\xa2\x16\x10\xd2\x54\x03\x00\x00")

func langEnUsAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langEnUsAllJson,
		"lang/en-us.all.json",
	)
}

func langEnUsAllJson() (*asset, error) {
	bytes, err := langEnUsAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/en-us.all.json", size: 852, mode: os.FileMode(420), modTime: time.Unix(1499532721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langFrAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xcd\x6e\x1a\x49\x10\xbe\xe7\x29\x4a\x5c\x72\x89\x92\xfb\xde\xb2\x66\x1d\x6c\xc5\x60\x19\xaf\xa3\x9c\x50\x31\x53\x30\xb5\xea\x9f\xd9\xfe\x81\x8c\x10\xef\xb3\x3c\x07\x2f\xb6\xea\x01\x27\x4c\x33\xc5\x62\xed\x11\xea\xfb\xbe\xa9\xea\xfa\xeb\xde\xbc\x03\x00\x18\x7c\xae\xdd\xe0\x37\x38\xfc\x68\xff\xb0\xa1\xa2\xf4\xd7\xe0\xf3\xca\xb1\x1a\xb4\x86\xed\x87\x23\x38\x2e\x25\xb0\x8d\xa1\x8b\x1d\x93\x0f\x50\x28\x26\x13\x80\x0d\x7c\xb1\x02\xf3\xe6\x00\x69\xe1\xd4\xe2\x3a\x32\x37\x1c\x1a\x81\xf9\xc2\x4a\x51\x17\x3d\x44\x09\x7c\x6f\xa3\xcb\xb0\x54\x08\xd8\xe1\x7e\x57\x90\x9e\xbb\x5c\x9c\x56\x5c\x10\xdc\x95\x12\x8d\x7d\x6d\x3d\x07\x5e\xc0\xdd\xb0\x4b\xfd\xc3\x07\x81\x94\x2c\x1d\xe8\x2d\xcd\x05\xe8\xed\x7e\xb7\x72\x4c\x59\x18\x23\xab\x49\x4a\x4a\x51\x44\xca\x73\x38\x62\x1f\xac\x93\x8e\xe9\x60\xe5\xbf\x63\x16\xfb\x28\x6a\x2e\xe5\x54\x1c\xcd\xfb\x5d\x97\x75\x67\x4a\xfa\x01\x7f\xbe\x08\xac\x9f\xe6\x0e\xe9\x1e\x8d\x94\x43\x34\xab\xb3\xf8\xef\xa3\x92\xe0\x31\x15\x48\xc8\xe1\xa2\x7a\x64\xd3\xc5\x7e\x45\x1f\x60\xda\x18\xb1\x4e\xc8\x19\xde\xff\xe3\x08\x7c\x63\x8a\xca\x59\xc3\x1e\x03\xdb\x4c\xe6\x01\xa5\x16\x7b\x40\xe7\x73\xac\x74\xc4\x1a\x39\x6b\x30\x5e\x56\x52\x55\x8d\x23\xe7\xed\x28\xf5\xdf\x38\x77\x77\x6c\x5d\xa8\x44\xb0\x2b\x73\xf4\x4a\xc4\xae\x7a\x9a\x68\x1c\xf5\x9c\x1c\x4c\x16\x70\x6b\x95\xb2\x6b\x72\x5e\xe4\x27\x36\x94\x04\x8b\x9f\xc8\x8e\xd4\xa4\x90\xc2\x9f\x14\xc1\x9e\x7d\xf9\xd1\x91\xf7\xd1\x49\xcd\xd2\x9a\xd9\x1a\xc0\xa0\xad\xaf\xab\xfd\xae\xa7\x0d\x9e\x90\xa5\xf2\x79\x54\x91\x7b\xd0\x30\x44\x56\x52\x4e\x5b\x0e\x60\x51\x44\x1d\xd5\x7e\x07\xe5\x7b\x8c\x7f\xd9\xe8\xca\xf7\x55\xe4\x1e\xad\x27\x0c\x92\xfb\xcf\x18\x7f\xa4\xb3\xaa\x05\x37\x12\x15\xda\x82\xae\xd2\x24\xbc\xe4\x4f\x41\x21\xa4\x73\x7f\x2d\xee\x8a\x62\x7e\x96\x53\xaa\x05\x89\x29\xd5\xa1\x27\xed\x53\x1b\xc5\xa2\x9a\xc6\xac\xa6\xa6\xd1\x07\x64\x43\x25\x7c\x63\x23\x4d\xdb\x17\x0e\xe4\x3d\x41\x19\x61\x95\x16\x88\xb7\x31\x90\x89\x5d\xa5\x67\xd2\x35\x39\x0c\x72\xda\x13\x62\xbf\x3b\x42\xba\x5c\xd6\xe4\x03\x6a\x29\xd2\x5f\xf6\x0e\xed\xdb\x90\x1d\x15\xed\x14\xe8\xe7\xa5\x98\xe0\x17\xa8\x4b\x26\x71\x51\x4c\x22\xe5\xab\x22\x53\x92\xb6\xd2\xd1\xfe\x7a\x52\x3d\x1a\x5f\xa2\xf8\xd9\x27\x5c\xa0\x6a\xbb\xf0\x9c\xfb\x9d\xa4\xde\x9d\xe4\xe5\x5b\xce\x4a\x6c\x72\xb4\x49\x49\x19\x6c\x36\x1f\x6f\x6c\x34\x61\xbb\x85\x12\x9b\xc1\x87\x1e\xb9\x2e\x24\x1b\x03\x15\x2f\xa5\xca\x1a\x61\x7e\x2b\x51\x76\x2d\x60\x7f\xc7\x4c\x57\x53\xc9\x51\x4b\x93\xdb\x36\x94\xe5\x4e\x37\xb3\x8a\xd2\x4c\x9e\xb1\x99\x69\x0a\xe7\x93\xed\x10\xef\x1d\xa0\x86\x93\x88\x0e\x50\x08\xa8\xd4\xc7\xde\xe8\x2f\x12\x3a\x2e\xd4\xe4\xbc\x35\xb3\xa5\x23\x0a\x6c\xa4\xbb\xda\x88\x94\xb2\x49\xf0\xb1\x85\x6f\xb7\xbd\x22\xd1\x38\xc2\x72\x46\x1a\x59\xcd\x8a\xf4\x69\x29\x7b\xaf\x32\x50\xa1\x3f\xf5\xf3\xa0\x00\xad\x82\xef\x0f\xed\x7a\xf6\x75\x2e\xce\x02\x6b\x5a\x38\x3c\xbb\x12\xbd\xcd\xd9\x74\x61\x0d\x15\x41\x9d\xe6\xe5\x66\xf3\xf1\xf9\x55\x75\xbb\xfd\x7f\x71\x5c\x14\xee\x86\xe8\xec\xd2\xa1\xbe\x2e\x97\x6b\xeb\x54\x36\x43\x1b\x1b\xdd\xb5\x39\xfc\x6e\x23\x54\xb8\xa2\x37\x26\xef\x0a\x5a\xb6\x03\x16\x61\x8d\x8e\xe0\x85\x9c\x97\x07\xd6\xd1\x9a\xc6\x95\x3f\x32\xb2\x57\x88\x9e\xb7\x4f\x86\x93\xe1\x7e\x73\x61\xba\x1f\x21\x80\x7a\xce\x68\x42\x2e\xb6\xc6\xe6\x54\x09\x46\xbc\xac\xe0\x2a\xbd\xb9\x4f\x5e\x54\x18\xff\x53\xf3\xab\x5d\xbf\x45\x72\x8e\xde\xe7\xcb\x08\xdd\x92\xde\x1c\x72\xc1\xf3\xfc\x85\xd4\xfa\xf6\x09\x2a\xf9\xd5\xf0\x88\x2e\x30\x7c\x82\x07\x64\x9f\xef\xa7\x0b\x34\x7d\x0a\x7f\xb7\xfd\x37\x00\x00\xff\xff\x0d\xda\x19\x3b\x5f\x0e\x00\x00")

func langFrAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langFrAllJson,
		"lang/fr.all.json",
	)
}

func langFrAllJson() (*asset, error) {
	bytes, err := langFrAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/fr.all.json", size: 3679, mode: os.FileMode(420), modTime: time.Unix(1500579581, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testConfigfortestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6a\xe3\x30\x10\xbd\xfb\x2b\x1e\xce\xa1\x5d\x48\x9a\x06\x4a\x29\x3e\x2c\x74\xe9\x1e\x16\xca\x12\xba\xe9\x07\x8c\xa5\x71\x2c\x22\x6b\x8c\x34\x4e\xeb\xbf\x5f\xe4\x34\x4d\x96\xe6\xb0\x3a\x69\xe6\xf1\xde\x8c\x9e\xde\x62\xb1\x28\x66\xf0\x14\xb6\x03\x6d\x19\xd7\x1c\x16\x43\x9a\xa3\x89\xdf\x0a\x9c\xda\x15\xa6\x7e\x31\xfb\x38\x58\x53\xa4\x2e\xa1\x91\x88\xc0\x49\x8b\x19\x7e\x4b\xec\xc8\xfb\x11\x56\xc2\x95\xc2\xb4\x14\xb6\x5c\x60\x82\x5f\x5f\x9e\x2b\x94\xad\x6a\x9f\xaa\xe5\x92\x7a\x77\x93\xbb\x37\x46\xba\x5c\x2c\xd3\x6e\xb4\xa4\xb4\x2c\x8b\x19\xb4\x65\xec\x78\x9c\xc3\xe9\x55\x42\x13\x39\x0f\x3f\x32\x2d\xa5\xb6\x16\x8a\xf6\xc4\xff\x98\xf0\x68\x0c\xa7\xb4\x91\x1d\x87\x0a\xe5\x28\x43\xd4\x7c\x2f\x4f\x1b\xbf\x70\x13\x39\xb5\x50\xd7\xf1\x1c\x35\x23\x88\x42\x05\x29\x6f\x8d\x9a\x0d\x0d\x89\x31\xca\x00\x8a\x8c\xda\x8b\xd9\xb1\x45\x3d\x42\x7a\x0e\x6f\x4c\xda\x72\x04\x05\x3b\x8d\xc3\xb5\x0b\x48\x6c\x24\xd8\xec\x53\x3c\x68\x6f\x5c\xc7\xb1\x42\x79\x7f\x7b\x36\xf7\x57\x03\x8d\x03\xc3\xba\xd4\x7b\x1a\xe1\x42\x93\x9d\x52\x27\x21\x41\x02\x8c\x84\x24\x3e\x3b\xf5\x71\x7b\x34\xea\xf6\xa4\x6c\x2b\x94\x99\x59\x16\xc0\xff\xcb\xbd\x71\xdd\xd3\x64\x7c\xbb\xd9\xac\x2f\x69\xe5\xfe\x5a\xa2\xa2\x42\x59\xad\x56\xab\x55\xf9\xe5\x5b\x5d\x68\xfc\xf0\xfe\xf4\x03\x81\xb3\xad\x14\x47\xb8\xc3\xdc\x02\x9f\xe0\x25\xed\x23\xf6\x87\xe3\x7e\xb2\xc2\x8b\x21\xdf\x4a\xd2\xaf\x68\xde\xa1\x42\xf9\x70\xfb\x70\x7f\x0e\xbe\x26\x8e\x81\x3a\xae\x50\x46\x91\x7f\x78\x6b\x4a\xe9\x4d\xa2\xbd\x00\x3d\x91\x52\x4d\x29\xb3\xf2\xff\x9c\x3d\xe9\xe7\x7b\xcf\x31\x07\x74\x35\x79\x05\x2c\xbe\xe3\x0e\x1a\xc9\xe4\xc7\x78\xd9\x3e\xf3\x9e\x7d\x85\xbb\x1c\x3e\x41\x0e\x41\xce\xa0\x11\xcb\x70\x01\xd2\x34\xde\x05\x46\x97\xeb\x7e\x50\x74\x62\x76\xd5\xd1\x8b\x43\xd1\x90\x4f\x5c\xcc\x0e\x5c\xee\x7a\x4f\xca\x73\x24\x25\x75\x06\x8d\xf3\x93\x50\x23\xde\x72\x9c\x52\xe7\x02\xea\x21\x58\xcf\xb6\x00\x2c\xef\x3f\x15\x8e\xa7\xf8\x1b\x00\x00\xff\xff\xe1\xe2\x3e\xaf\x96\x03\x00\x00")

func testConfigfortestYamlBytes() ([]byte, error) {
	return bindataRead(
		_testConfigfortestYaml,
		"test/configForTest.yaml",
	)
}

func testConfigfortestYaml() (*asset, error) {
	bytes, err := testConfigfortestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/configForTest.yaml", size: 918, mode: os.FileMode(420), modTime: time.Unix(1499533139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/endScript.html": tmplEndscriptHtml,
	"tmpl/header.html": tmplHeaderHtml,
	"tmpl/history/body.html": tmplHistoryBodyHtml,
	"tmpl/history/menu.html": tmplHistoryMenuHtml,
	"tmpl/history/script.html": tmplHistoryScriptHtml,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/log/body.html": tmplLogBodyHtml,
	"tmpl/log/menu.html": tmplLogMenuHtml,
	"tmpl/log/script.html": tmplLogScriptHtml,
	"tmpl/nest/body.html": tmplNestBodyHtml,
	"tmpl/nest/menu.html": tmplNestMenuHtml,
	"tmpl/nest/script.html": tmplNestScriptHtml,
	"tmpl/nest.txt": tmplNestTxt,
	"lang/en-us.all.json": langEnUsAllJson,
	"lang/fr.all.json": langFrAllJson,
	"test/configForTest.yaml": testConfigfortestYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lang": &bintree{nil, map[string]*bintree{
		"en-us.all.json": &bintree{langEnUsAllJson, map[string]*bintree{}},
		"fr.all.json": &bintree{langFrAllJson, map[string]*bintree{}},
	}},
	"test": &bintree{nil, map[string]*bintree{
		"configForTest.yaml": &bintree{testConfigfortestYaml, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"endScript.html": &bintree{tmplEndscriptHtml, map[string]*bintree{}},
		"header.html": &bintree{tmplHeaderHtml, map[string]*bintree{}},
		"history": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplHistoryBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplHistoryMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplHistoryScriptHtml, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"log": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplLogBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplLogMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplLogScriptHtml, map[string]*bintree{}},
		}},
		"nest": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplNestBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplNestMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplNestScriptHtml, map[string]*bintree{}},
		}},
		"nest.txt": &bintree{tmplNestTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

